const fs = require('fs');
const path = require('path');

console.log('üß™ Test des nouveaux modules EcosystIA...\n');

// V√©rifier l'existence des nouveaux composants
const newModules = [
  'components/CRM.tsx',
  'components/CourseManagement.tsx', 
  'components/Analytics.tsx',
  'components/UserManagement.tsx',
  'components/Settings.tsx',
  'components/Goals.tsx',
  'components/TimeTracking.tsx'
];

console.log('üìÅ V√©rification des fichiers des nouveaux modules:');
let allModulesExist = true;

newModules.forEach(module => {
  if (fs.existsSync(module)) {
    console.log(`‚úÖ ${module} - Existe`);
  } else {
    console.log(`‚ùå ${module} - Manquant`);
    allModulesExist = false;
  }
});

// V√©rifier les imports dans App.tsx
console.log('\nüì¶ V√©rification des imports dans App.tsx:');
const appContent = fs.readFileSync('App.tsx', 'utf8');

const requiredImports = [
  'import CRM from \'./components/CRM\';',
  'import CourseManagement from \'./components/CourseManagement\';',
  'import Analytics from \'./components/Analytics\';',
  'import UserManagement from \'./components/UserManagement\';',
  'import Settings from \'./components/Settings\';',
  'import Goals from \'./components/Goals\';',
  'import TimeTracking from \'./components/TimeTracking\';'
];

let allImportsExist = true;
requiredImports.forEach(importStatement => {
  if (appContent.includes(importStatement)) {
    console.log(`‚úÖ ${importStatement}`);
  } else {
    console.log(`‚ùå ${importStatement}`);
    allImportsExist = false;
  }
});

// V√©rifier les routes dans App.tsx
console.log('\nüõ£Ô∏è  V√©rification des routes dans App.tsx:');
const requiredRoutes = [
  'case \'crm_sales\':',
  'case \'course_management\':',
  'case \'analytics\':',
  'case \'user_management\':',
  'case \'settings\':',
  'case \'goals_okrs\':',
  'case \'time_tracking\':'
];

let allRoutesExist = true;
requiredRoutes.forEach(route => {
  if (appContent.includes(route)) {
    console.log(`‚úÖ ${route}`);
  } else {
    console.log(`‚ùå ${route}`);
    allRoutesExist = false;
  }
});

// V√©rifier la navigation dans Sidebar.tsx
console.log('\nüß≠ V√©rification de la navigation dans Sidebar.tsx:');
const sidebarContent = fs.readFileSync('components/Sidebar.tsx', 'utf8');

const requiredNavItems = [
  '\'crm_sales\'',
  '\'course_management\'',
  '\'analytics\'',
  '\'user_management\'',
  '\'settings\'',
  '\'goals_okrs\'',
  '\'time_tracking\''
];

let allNavItemsExist = true;
requiredNavItems.forEach(navItem => {
  if (sidebarContent.includes(navItem)) {
    console.log(`‚úÖ ${navItem}`);
  } else {
    console.log(`‚ùå ${navItem}`);
    allNavItemsExist = false;
  }
});

// V√©rifier les fonctionnalit√©s sp√©ciales
console.log('\nüéØ V√©rification des fonctionnalit√©s sp√©ciales:');

// V√©rifier le formatage FCFA
const fcfAComponents = ['CRM.tsx', 'Finance.tsx', 'CourseManagement.tsx'];
let fcfASupport = true;
fcfAComponents.forEach(component => {
  const content = fs.readFileSync(`components/${component}`, 'utf8');
  if (content.includes('formatFCFA') || content.includes('XOF')) {
    console.log(`‚úÖ ${component} - Support FCFA`);
  } else {
    console.log(`‚ùå ${component} - Pas de support FCFA`);
    fcfASupport = false;
  }
});

// V√©rifier les permissions
console.log('\nüîê V√©rification du syst√®me de permissions:');
const permissionComponents = ['CRM.tsx', 'CourseManagement.tsx', 'UserManagement.tsx', 'Settings.tsx'];
let permissionSupport = true;
permissionComponents.forEach(component => {
  const content = fs.readFileSync(`components/${component}`, 'utf8');
  if (content.includes('checkPermission')) {
    console.log(`‚úÖ ${component} - Permissions int√©gr√©es`);
  } else {
    console.log(`‚ùå ${component} - Pas de permissions`);
    permissionSupport = false;
  }
});

// R√©sum√© final
console.log('\nüìä R√âSUM√â DU TEST:');
console.log('==================');

if (allModulesExist) {
  console.log('‚úÖ Tous les modules sont cr√©√©s');
} else {
  console.log('‚ùå Certains modules sont manquants');
}

if (allImportsExist) {
  console.log('‚úÖ Tous les imports sont pr√©sents dans App.tsx');
} else {
  console.log('‚ùå Certains imports sont manquants dans App.tsx');
}

if (allRoutesExist) {
  console.log('‚úÖ Toutes les routes sont configur√©es dans App.tsx');
} else {
  console.log('‚ùå Certaines routes sont manquantes dans App.tsx');
}

if (allNavItemsExist) {
  console.log('‚úÖ Tous les √©l√©ments de navigation sont pr√©sents dans Sidebar.tsx');
} else {
  console.log('‚ùå Certains √©l√©ments de navigation sont manquants dans Sidebar.tsx');
}

if (fcfASupport) {
  console.log('‚úÖ Support FCFA int√©gr√©');
} else {
  console.log('‚ùå Support FCFA incomplet');
}

if (permissionSupport) {
  console.log('‚úÖ Syst√®me de permissions int√©gr√©');
} else {
  console.log('‚ùå Syst√®me de permissions incomplet');
}

const overallSuccess = allModulesExist && allImportsExist && allRoutesExist && allNavItemsExist && fcfASupport && permissionSupport;

console.log('\nüéâ R√âSULTAT FINAL:');
if (overallSuccess) {
  console.log('‚úÖ TOUS LES NOUVEAUX MODULES SONT PR√äTS !');
  console.log('üöÄ EcosystIA est maintenant complet avec tous les modules d√©velopp√©s.');
} else {
  console.log('‚ùå Des corrections sont n√©cessaires avant de pouvoir utiliser tous les modules.');
}

console.log('\nüìã Modules d√©velopp√©s:');
console.log('‚Ä¢ CRM & Sales - Gestion de la relation client');
console.log('‚Ä¢ Course Management - Administration p√©dagogique');
console.log('‚Ä¢ Analytics - Tableaux de bord et analyses');
console.log('‚Ä¢ User Management - Gestion des utilisateurs');
console.log('‚Ä¢ Settings - Configuration du syst√®me');
console.log('‚Ä¢ Goals (OKRs) - Suivi des objectifs');
console.log('‚Ä¢ Time Tracking - Suivi du temps');

console.log('\n‚ú® Fonctionnalit√©s sp√©ciales:');
console.log('‚Ä¢ Formatage FCFA pour le march√© s√©n√©galais');
console.log('‚Ä¢ Syst√®me de permissions granulaire');
console.log('‚Ä¢ Interface adapt√©e au contexte local');
console.log('‚Ä¢ Int√©gration avec ARVA (IA)');