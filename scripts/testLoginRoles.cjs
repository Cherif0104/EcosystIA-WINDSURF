const fs = require('fs');
const path = require('path');

console.log('üéØ TEST DE LA CONNEXION PAR R√îLE');
console.log('=================================\n');

const constantsPath = path.join(__dirname, '../constants');
const componentsPath = path.join(__dirname, '../components');

console.log('üìä ANALYSE DE LA CONNEXION PAR R√îLE');
console.log('===================================\n');

// V√©rifier les r√¥les dans mockUsers
const dataPath = path.join(constantsPath, 'data.ts');
if (fs.existsSync(dataPath)) {
  console.log('‚úÖ data.ts: Pr√©sent');
  
  const content = fs.readFileSync(dataPath, 'utf8');
  
  // Extraire tous les utilisateurs et leurs r√¥les
  const userMatches = content.match(/const mockUsers: \{[\s\S]*?\} = \{([\s\S]*?)\};/);
  if (userMatches) {
    const usersContent = userMatches[1];
    
    // Extraire chaque utilisateur
    const userBlocks = usersContent.match(/\w+:\s*\{[\s\S]*?\}/g);
    const users = [];
    
    if (userBlocks) {
      userBlocks.forEach(block => {
        const nameMatch = block.match(/name:\s*["']([^"']+)["']/);
        const emailMatch = block.match(/email:\s*["']([^"']+)["']/);
        const roleMatch = block.match(/role:\s*['"`]([^'"`]+)['"`]/);
        
        if (nameMatch && emailMatch && roleMatch) {
          users.push({
            name: nameMatch[1],
            email: emailMatch[1],
            role: roleMatch[1]
          });
        }
      });
    }
    
    console.log(`üìã Utilisateurs disponibles (${users.length}):`);
    users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.name} (${user.email}) - R√¥le: ${user.role}`);
    });
    console.log('');
    
    // V√©rifier les r√¥les uniques
    const uniqueRoles = [...new Set(users.map(u => u.role))];
    console.log(`üìä R√¥les uniques disponibles (${uniqueRoles.length}):`);
    uniqueRoles.forEach((role, index) => {
      const roleUsers = users.filter(u => u.role === role);
      console.log(`   ${index + 1}. '${role}' (${roleUsers.length} utilisateur(s))`);
      roleUsers.forEach(user => {
        console.log(`      ‚Ä¢ ${user.name} (${user.email})`);
      });
    });
    console.log('');
    
  } else {
    console.log('‚ùå Structure mockUsers non trouv√©e');
  }
  
} else {
  console.log('‚ùå data.ts: MANQUANT\n');
}

// V√©rifier les r√¥les dans Login.tsx
const loginPath = path.join(componentsPath, 'Login.tsx');
if (fs.existsSync(loginPath)) {
  console.log('‚úÖ Login.tsx: Pr√©sent');
  
  const content = fs.readFileSync(loginPath, 'utf8');
  
  // Extraire le r√¥le par d√©faut
  const defaultRoleMatch = content.match(/useState<Role>\('([^']+)'\)/);
  const defaultRole = defaultRoleMatch ? defaultRoleMatch[1] : 'non trouv√©';
  console.log(`üéØ R√¥le par d√©faut: '${defaultRole}'`);
  
  // Extraire tous les r√¥les dans les options
  const optionMatches = content.match(/value="([^"]+)"/g);
  const optionRoles = optionMatches ? optionMatches.map(match => {
    const valueMatch = match.match(/value="([^"]+)"/);
    return valueMatch ? valueMatch[1] : null;
  }).filter(Boolean) : [];
  
  console.log(`üìã R√¥les dans Login.tsx (${optionRoles.length}):`);
  optionRoles.forEach((role, index) => {
    console.log(`   ${index + 1}. '${role}'`);
  });
  console.log('');
  
} else {
  console.log('‚ùå Login.tsx: MANQUANT\n');
}

// V√©rifier la logique de connexion
console.log('üîç V√âRIFICATION DE LA LOGIQUE DE CONNEXION');
console.log('==========================================\n');

if (fs.existsSync(loginPath)) {
  const content = fs.readFileSync(loginPath, 'utf8');
  
  // V√©rifier la fonction handleLogin
  const handleLoginMatch = content.match(/const handleLogin = \(e: React\.FormEvent\) => \{[\s\S]*?\};/);
  if (handleLoginMatch) {
    console.log('‚úÖ Fonction handleLogin trouv√©e');
    
    const handleLoginContent = handleLoginMatch[0];
    
    // V√©rifier la logique de recherche d'utilisateur
    const findUserMatch = handleLoginContent.match(/Object\.values\(mockUsers\)\.find\(u => u\.role === selectedRole\)/);
    if (findUserMatch) {
      console.log('‚úÖ Logique de recherche d\'utilisateur trouv√©e');
    } else {
      console.log('‚ùå Logique de recherche d\'utilisateur manquante');
    }
    
    // V√©rifier le fallback
    const fallbackMatch = handleLoginContent.match(/\|\| mockUsers\.student/);
    if (fallbackMatch) {
      console.log('‚úÖ Fallback vers mockUsers.student trouv√©');
    } else {
      console.log('‚ùå Fallback vers mockUsers.student manquant');
    }
    
    // V√©rifier l'appel √† login
    const loginCallMatch = handleLoginContent.match(/login\(userToLogin\)/);
    if (loginCallMatch) {
      console.log('‚úÖ Appel √† login() trouv√©');
    } else {
      console.log('‚ùå Appel √† login() manquant');
    }
    
  } else {
    console.log('‚ùå Fonction handleLogin non trouv√©e');
  }
  
} else {
  console.log('‚ùå Login.tsx: MANQUANT');
}

console.log('\nüìà R√âSUM√â FINAL');
console.log('================\n');

console.log('üéØ R√âSULTATS DU TEST:');
console.log('=====================');
console.log('‚Ä¢ V√©rifiez que tous les r√¥les sont disponibles dans Login.tsx');
console.log('‚Ä¢ V√©rifiez que tous les r√¥les ont des utilisateurs correspondants dans data.ts');
console.log('‚Ä¢ V√©rifiez que la logique de connexion fonctionne correctement');
console.log('‚Ä¢ Testez la connexion avec diff√©rents r√¥les dans l\'application\n');

console.log('üöÄ ACTIONS RECOMMAND√âES:');
console.log('========================');
console.log('1. Ouvrir l\'application dans le navigateur');
console.log('2. S√©lectionner un r√¥le diff√©rent (ex: administrator)');
console.log('3. Cliquer sur "Se connecter"');
console.log('4. V√©rifier que le Dashboard affiche le bon r√¥le');
console.log('5. V√©rifier les logs dans la console du navigateur\n');

console.log('üß™ Test de la connexion par r√¥le termin√© !');
