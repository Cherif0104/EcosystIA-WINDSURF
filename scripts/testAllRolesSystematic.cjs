const fs = require('fs');
const path = require('path');

console.log('ðŸ§ª Test systÃ©matique de TOUS les rÃ´les...\n');

// Lire les fichiers nÃ©cessaires
const roleColorsPath = path.join(__dirname, '..', 'constants', 'roleColors.ts');
const dataPath = path.join(__dirname, '..', 'constants', 'data.ts');
const loginPath = path.join(__dirname, '..', 'components', 'Login.tsx');

const roleColorsContent = fs.readFileSync(roleColorsPath, 'utf8');
const dataContent = fs.readFileSync(dataPath, 'utf8');
const loginContent = fs.readFileSync(loginPath, 'utf8');

// Extraire tous les rÃ´les configurÃ©s
const roleMatches = roleColorsContent.match(/(\w+):\s*{[\s\S]*?name:\s*['"`]([^'"`]+)['"`]/g);
const roles = roleMatches ? roleMatches.map(match => {
  const keyMatch = match.match(/(\w+):/);
  const nameMatch = match.match(/name:\s*['"`]([^'"`]+)['"`]/);
  return {
    key: keyMatch ? keyMatch[1] : null,
    name: nameMatch ? nameMatch[1] : null
  };
}).filter(role => role.key && role.name) : [];

// Extraire tous les utilisateurs
const userMatches = dataContent.match(/(\w+):\s*{[\s\S]*?role:\s*['"`]([^'"`]+)['"`]/g);
const users = userMatches ? userMatches.map(match => {
  const keyMatch = match.match(/(\w+):/);
  const roleMatch = match.match(/role:\s*['"`]([^'"`]+)['"`]/);
  return {
    key: keyMatch ? keyMatch[1] : null,
    role: roleMatch ? roleMatch[1] : null
  };
}).filter(user => user.key && user.role) : [];

console.log('ðŸ“‹ PLAN DE TEST SYSTÃ‰MATIQUE:');
console.log('=============================\n');

let testNumber = 1;
const testPlan = [];

// CrÃ©er le plan de test pour chaque rÃ´le
roles.forEach(role => {
  const user = users.find(u => u.role === role.key);
  if (user) {
    testPlan.push({
      number: testNumber++,
      roleKey: role.key,
      roleName: role.name,
      userKey: user.key,
      status: 'Ã€ tester'
    });
  }
});

// Afficher le plan de test
testPlan.forEach(test => {
  console.log(`${test.number.toString().padStart(2, '0')}. ${test.roleName} (${test.roleKey})`);
  console.log(`    Utilisateur: ${test.userKey}`);
  console.log(`    Status: ${test.status}`);
  console.log('');
});

console.log('ðŸŽ¯ INSTRUCTIONS POUR LE TEST:');
console.log('=============================');
console.log('1. Allez sur http://localhost:5175');
console.log('2. Pour chaque rÃ´le, suivez ces Ã©tapes:');
console.log('   a) SÃ©lectionnez le rÃ´le dans le menu dÃ©roulant');
console.log('   b) Cliquez sur "Se connecter"');
console.log('   c) VÃ©rifiez dans la console (F12) les logs:');
console.log('      - ðŸŽ¯ Dashboard - RÃ´le dÃ©tectÃ©: [rÃ´le]');
console.log('      - ðŸŽ¯ Dashboard - Nom du rÃ´le affichÃ©: [nom]');
console.log('   d) VÃ©rifiez sur l\'interface:');
console.log('      - Le nom du rÃ´le s\'affiche correctement');
console.log('      - Les couleurs correspondent au rÃ´le');
console.log('      - Les actions rapides sont spÃ©cifiques');
console.log('   e) DÃ©connectez-vous et passez au suivant');
console.log('');

console.log('ðŸ“Š RÃ‰SUMÃ‰:');
console.log(`   - Total des rÃ´les Ã  tester: ${testPlan.length}`);
console.log(`   - RÃ´les configurÃ©s: ${roles.length}`);
console.log(`   - Utilisateurs disponibles: ${users.length}`);
console.log('');

console.log('âœ… CORRECTIONS APPLIQUÃ‰ES:');
console.log('   - âœ… Erreur CSS transform-origin corrigÃ©e');
console.log('   - âœ… Gestion d\'erreur Supabase amÃ©liorÃ©e');
console.log('   - âœ… Tous les rÃ´les ont des actions rapides');
console.log('');

console.log('ðŸš€ PRÃŠT POUR LE TEST !');
console.log('Commencez par le premier rÃ´le et suivez le plan ci-dessus.');
