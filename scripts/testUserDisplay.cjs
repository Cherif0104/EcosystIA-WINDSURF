const fs = require('fs');
const path = require('path');

console.log('üéØ TEST DE L\'AFFICHAGE UTILISATEUR ET R√îLE');
console.log('===========================================\n');

const componentsPath = path.join(__dirname, '../components');
const commonPath = path.join(componentsPath, 'common');
const constantsPath = path.join(__dirname, '../constants');

console.log('üìä ANALYSE DE L\'AFFICHAGE UTILISATEUR');
console.log('=====================================\n');

// V√©rifier que SimpleModernDashboard existe
const simpleDashboardPath = path.join(commonPath, 'SimpleModernDashboard.tsx');
if (fs.existsSync(simpleDashboardPath)) {
  console.log('‚úÖ SimpleModernDashboard.tsx: Pr√©sent');
  
  const content = fs.readFileSync(simpleDashboardPath, 'utf8');
  
  // V√©rifications de l'affichage utilisateur
  const hasUserName = content.includes('userDisplayName');
  const hasUserEmail = content.includes('userEmail');
  const hasIsConnected = content.includes('isConnected');
  const hasRoleDisplay = content.includes('roleConfig.name');
  const hasStatusIndicator = content.includes('Connect√©') && content.includes('Non connect√©');
  const hasUserFallback = content.includes('user?.name || user?.email?.split(\'@\')[0] || \'Utilisateur\'');
  const hasRoleFallback = content.includes('user?.role || \'student\'');
  
  console.log(`   ‚úÖ Nom utilisateur affich√©: ${hasUserName ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Email utilisateur affich√©: ${hasUserEmail ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Statut connexion: ${hasIsConnected ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ R√¥le affich√©: ${hasRoleDisplay ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Indicateur statut: ${hasStatusIndicator ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Fallback nom: ${hasUserFallback ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Fallback r√¥le: ${hasRoleFallback ? 'Oui' : 'Non'}`);
  
  // V√©rifier les √©l√©ments d'affichage sp√©cifiques
  const hasWelcomeMessage = content.includes('Bonjour, {userDisplayName} !');
  const hasRoleDescription = content.includes('{roleConfig.description}');
  const hasRoleBadge = content.includes('{roleConfig.name}');
  const hasConnectionStatus = content.includes('{isConnected ? \'Connect√©\' : \'Non connect√©\'}');
  const hasEmailDisplay = content.includes('{userEmail}');
  
  console.log(`   ‚úÖ Message de bienvenue: ${hasWelcomeMessage ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Description du r√¥le: ${hasRoleDescription ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Badge du r√¥le: ${hasRoleBadge ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Statut de connexion: ${hasConnectionStatus ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Affichage email: ${hasEmailDisplay ? 'Oui' : 'Non'}`);
  
  // V√©rifier la robustesse
  const hasMultipleRoleDisplays = (content.match(/roleConfig\.name/g) || []).length >= 2;
  const hasMultipleUserDisplays = (content.match(/userDisplayName/g) || []).length >= 2;
  
  console.log(`   ‚úÖ Affichage multiple du r√¥le: ${hasMultipleRoleDisplays ? 'Oui' : 'Non'}`);
  console.log(`   ‚úÖ Affichage multiple du nom: ${hasMultipleUserDisplays ? 'Oui' : 'Non'}`);
  
  console.log(`   ‚úÖ Status: VALIDE\n`);
} else {
  console.log('‚ùå SimpleModernDashboard.tsx: MANQUANT\n');
}

// V√©rifier les r√¥les dans roleColors.ts
const roleColorsPath = path.join(constantsPath, 'roleColors.ts');
if (fs.existsSync(roleColorsPath)) {
  console.log('üîß V√âRIFICATION DES R√îLES DANS ROLE_COLORS');
  console.log('==========================================\n');
  
  const roleColorsContent = fs.readFileSync(roleColorsPath, 'utf8');
  
  // Extraire tous les r√¥les d√©finis
  const roleMatches = roleColorsContent.match(/^\s*(\w+):\s*\{/gm);
  const definedRoles = roleMatches ? roleMatches.map(match => match.trim().replace(':', '')) : [];
  
  console.log(`üìã R√¥les d√©finis dans ROLE_COLORS (${definedRoles.length}):`);
  definedRoles.forEach((role, index) => {
    console.log(`   ${index + 1}. ${role}`);
  });
  console.log('');
  
  // V√©rifier que tous les r√¥les ont un nom et une description
  const rolesWithName = definedRoles.filter(role => {
    const roleSection = roleColorsContent.match(new RegExp(`${role}:\\s*\\{[\\s\\S]*?\\}`, 'm'));
    return roleSection && roleSection[0].includes('name:');
  });
  
  const rolesWithDescription = definedRoles.filter(role => {
    const roleSection = roleColorsContent.match(new RegExp(`${role}:\\s*\\{[\\s\\S]*?\\}`, 'm'));
    return roleSection && roleSection[0].includes('description:');
  });
  
  console.log(`‚úÖ R√¥les avec nom: ${rolesWithName.length}/${definedRoles.length}`);
  console.log(`‚úÖ R√¥les avec description: ${rolesWithDescription.length}/${definedRoles.length}`);
  
} else {
  console.log('‚ùå roleColors.ts non trouv√©\n');
}

// V√©rifier l'int√©gration dans Dashboard.tsx
const dashboardPath = path.join(componentsPath, 'Dashboard.tsx');
if (fs.existsSync(dashboardPath)) {
  console.log('üîß V√âRIFICATION DE L\'INT√âGRATION DASHBOARD');
  console.log('===========================================\n');
  
  const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');
  
  const isImported = dashboardContent.includes('import SimpleModernDashboard');
  const isUsed = dashboardContent.includes('<SimpleModernDashboard');
  
  console.log(`üîç SimpleModernDashboard:`);
  console.log(`   Import: ${isImported ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Utilis√©: ${isUsed ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Status: ${isImported && isUsed ? 'INT√âGR√â' : 'MANQUANT'}\n`);
  
} else {
  console.log('‚ùå Dashboard.tsx non trouv√©\n');
}

console.log('üìà R√âSUM√â FINAL');
console.log('================\n');

const isUserDisplayComplete = fs.existsSync(simpleDashboardPath) && 
                             fs.existsSync(roleColorsPath) && 
                             fs.existsSync(dashboardPath);

if (isUserDisplayComplete) {
  console.log('üéâ EXCELLENT! Affichage utilisateur et r√¥le complet !\n');
  console.log('‚ú® CARACT√âRISTIQUES DE L\'AFFICHAGE:');
  console.log('===================================');
  console.log('‚Ä¢ Nom utilisateur affich√© de mani√®re robuste');
  console.log('‚Ä¢ R√¥le affich√© avec couleurs appropri√©es');
  console.log('‚Ä¢ Statut de connexion visible');
  console.log('‚Ä¢ Email utilisateur affich√©');
  console.log('‚Ä¢ Fallbacks pour donn√©es manquantes');
  console.log('‚Ä¢ Interface claire et informative\n');
  
  console.log('üéØ √âL√âMENTS AFFICH√âS:');
  console.log('====================');
  console.log('‚Ä¢ Message de bienvenue personnalis√©');
  console.log('‚Ä¢ Nom complet de l\'utilisateur');
  console.log('‚Ä¢ Email de l\'utilisateur');
  console.log('‚Ä¢ R√¥le avec badge color√©');
  console.log('‚Ä¢ Description du r√¥le');
  console.log('‚Ä¢ Indicateur de statut de connexion');
  console.log('‚Ä¢ Ic√¥ne sp√©cifique au r√¥le\n');
  
  console.log('üöÄ PR√äT POUR TOUS LES R√îLES !');
} else {
  console.log('‚ùå ATTENTION! L\'affichage utilisateur n√©cessite des corrections.');
}

console.log('\nüß™ Test de l\'affichage utilisateur et r√¥le termin√© !');
