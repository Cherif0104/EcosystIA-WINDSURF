const fs = require('fs');
const path = require('path');

console.log('üîç Test des corrections des notifications...\n');

// V√©rifier que le service realtimeService.ts a √©t√© corrig√©
const realtimeServicePath = 'services/realtimeService.ts';
if (fs.existsSync(realtimeServicePath)) {
  const content = fs.readFileSync(realtimeServicePath, 'utf8');
  
  // V√©rifier la pr√©sence de la gestion d'erreur pour get_unread_notifications
  if (content.includes('Fonction get_unread_notifications non disponible, utilisation de la requ√™te directe')) {
    console.log('‚úÖ realtimeService.ts : Gestion d\'erreur pour get_unread_notifications pr√©sente');
  } else {
    console.log('‚ùå realtimeService.ts : Gestion d\'erreur pour get_unread_notifications manquante');
  }
  
  // V√©rifier la pr√©sence de la requ√™te directe de fallback
  if (content.includes('SELECT * FROM notifications WHERE user_id = $1')) {
    console.log('‚úÖ realtimeService.ts : Requ√™te directe de fallback pr√©sente');
  } else {
    console.log('‚ùå realtimeService.ts : Requ√™te directe de fallback manquante');
  }
  
  // V√©rifier la gestion des colonnes alternatives (lire, is_read, read)
  if (content.includes('lire') && content.includes('is_read') && content.includes('read')) {
    console.log('‚úÖ realtimeService.ts : Gestion des colonnes alternatives pr√©sente');
  } else {
    console.log('‚ùå realtimeService.ts : Gestion des colonnes alternatives manquante');
  }
} else {
  console.log('‚ùå realtimeService.ts : Fichier non trouv√©');
}

// V√©rifier que le script SQL de correction existe
const sqlScriptPath = 'scripts/check_notifications_structure.sql';
if (fs.existsSync(sqlScriptPath)) {
  console.log('‚úÖ Script SQL de correction des notifications cr√©√©');
  
  const sqlContent = fs.readFileSync(sqlScriptPath, 'utf8');
  
  // V√©rifier la pr√©sence de la fonction get_unread_notifications
  if (sqlContent.includes('CREATE OR REPLACE FUNCTION get_unread_notifications')) {
    console.log('‚úÖ Script SQL : Fonction get_unread_notifications incluse');
  } else {
    console.log('‚ùå Script SQL : Fonction get_unread_notifications manquante');
  }
  
  // V√©rifier la pr√©sence des permissions
  if (sqlContent.includes('GRANT EXECUTE ON FUNCTION get_unread_notifications')) {
    console.log('‚úÖ Script SQL : Permissions accord√©es');
  } else {
    console.log('‚ùå Script SQL : Permissions manquantes');
  }
} else {
  console.log('‚ùå Script SQL de correction des notifications : Fichier non trouv√©');
}

console.log('\nüìã Instructions pour corriger les erreurs de notifications :');
console.log('1. Ouvrez Supabase Dashboard');
console.log('2. Allez dans SQL Editor');
console.log('3. Copiez le contenu du fichier scripts/check_notifications_structure.sql');
console.log('4. Collez et ex√©cutez le script');
console.log('5. V√©rifiez que la fonction get_unread_notifications a √©t√© cr√©√©e');

console.log('\nüéØ R√©sultat attendu :');
console.log('- Les erreurs 404 pour get_unread_notifications dispara√Ætront');
console.log('- Les notifications non lues s\'afficheront correctement');
console.log('- L\'application fonctionnera sans erreurs de console');