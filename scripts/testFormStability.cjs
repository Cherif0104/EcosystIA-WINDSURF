#!/usr/bin/env node

/**
 * Script de test de stabilit√© du formulaire de projets
 * V√©rifie les probl√®mes de performance et de stabilit√©
 */

const fs = require('fs');
const path = require('path');

console.log('üîß TEST DE STABILIT√â DU FORMULAIRE');
console.log('==================================\n');

// Test 1: V√©rification des hooks React
console.log('‚öõÔ∏è Test 1: V√©rification des hooks React...');
const projectsFile = path.join(__dirname, '../components/Projects.tsx');
if (fs.existsSync(projectsFile)) {
    const content = fs.readFileSync(projectsFile, 'utf8');
    
    // V√©rifier les hooks
    const hasUseState = content.includes('useState');
    const hasUseMemo = content.includes('useMemo');
    const hasUseEffect = content.includes('useEffect');
    
    console.log(`‚úÖ useState: ${hasUseState ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ useMemo: ${hasUseMemo ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ useEffect: ${hasUseEffect ? '‚úì' : '‚úó'}`);
    
    // V√©rifier les gestionnaires d'√©v√©nements
    const hasHandleChange = content.includes('handleChange');
    const hasHandleSubmit = content.includes('handleSubmit');
    const hasHandleScroll = content.includes('handleScroll');
    
    console.log(`‚úÖ handleChange: ${hasHandleChange ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ handleSubmit: ${hasHandleSubmit ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ handleScroll: ${hasHandleScroll ? '‚úì' : '‚úó'}`);
    
    // V√©rifier la validation
    const hasValidateForm = content.includes('validateForm');
    const hasValidateStep = content.includes('validateStep');
    const hasStepValidation = content.includes('stepValidation');
    
    console.log(`‚úÖ validateForm: ${hasValidateForm ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ validateStep: ${hasValidateStep ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ stepValidation: ${hasStepValidation ? '‚úì' : '‚úó'}`);
    
} else {
    console.log('‚ùå Fichier Projects.tsx manquant');
}

// Test 2: V√©rification des √©tats
console.log('\nüìä Test 2: V√©rification des √©tats...');
if (fs.existsSync(projectsFile)) {
    const content = fs.readFileSync(projectsFile, 'utf8');
    
    // V√©rifier les √©tats principaux
    const states = [
        'formData',
        'currentStep',
        'isLoading',
        'errors',
        'scrollProgress',
        'teamSearchTerm',
        'teamRoleFilter'
    ];
    
    let allStatesFound = true;
    states.forEach(state => {
        const found = content.includes(state);
        console.log(`‚úÖ √âtat ${state}: ${found ? '‚úì' : '‚úó'}`);
        if (!found) allStatesFound = false;
    });
    
    console.log(`\nüìà Tous les √©tats pr√©sents: ${allStatesFound ? '‚úì' : '‚úó'}`);
}

// Test 3: V√©rification de la gestion d'erreur
console.log('\n‚ö†Ô∏è Test 3: V√©rification de la gestion d\'erreur...');
if (fs.existsSync(projectsFile)) {
    const content = fs.readFileSync(projectsFile, 'utf8');
    
    // V√©rifier la gestion d'erreur
    const errorHandling = [
        'try {',
        'catch (error) {',
        'finally {',
        'setErrors',
        'setIsLoading(false)',
        'console.error'
    ];
    
    let errorHandlingScore = 0;
    errorHandling.forEach(pattern => {
        const found = content.includes(pattern);
        console.log(`‚úÖ ${pattern}: ${found ? '‚úì' : '‚úó'}`);
        if (found) errorHandlingScore++;
    });
    
    console.log(`\nüìà Score de gestion d'erreur: ${errorHandlingScore}/${errorHandling.length}`);
}

// Test 4: V√©rification de la performance
console.log('\n‚ö° Test 4: V√©rification de la performance...');
if (fs.existsSync(projectsFile)) {
    const content = fs.readFileSync(projectsFile, 'utf8');
    
    // V√©rifier les optimisations de performance
    const performanceFeatures = [
        'useMemo',
        'useCallback',
        'debounce',
        'throttle',
        'memo',
        'React.memo'
    ];
    
    let performanceScore = 0;
    performanceFeatures.forEach(feature => {
        const found = content.includes(feature);
        console.log(`‚úÖ ${feature}: ${found ? '‚úì' : '‚úó'}`);
        if (found) performanceScore++;
    });
    
    console.log(`\nüìà Score de performance: ${performanceScore}/${performanceFeatures.length}`);
}

// Test 5: V√©rification de la validation
console.log('\n‚úÖ Test 5: V√©rification de la validation...');
if (fs.existsSync(projectsFile)) {
    const content = fs.readFileSync(projectsFile, 'utf8');
    
    // V√©rifier les validations
    const validations = [
        'title.trim()',
        'description.trim()',
        'isNaN(Number(',
        'new Date(',
        'formData.team.length',
        'required'
    ];
    
    let validationScore = 0;
    validations.forEach(validation => {
        const found = content.includes(validation);
        console.log(`‚úÖ ${validation}: ${found ? '‚úì' : '‚úó'}`);
        if (found) validationScore++;
    });
    
    console.log(`\nüìà Score de validation: ${validationScore}/${validations.length}`);
}

// Test 6: V√©rification des d√©pendances
console.log('\nüì¶ Test 6: V√©rification des d√©pendances...');
const packageFile = path.join(__dirname, '../package.json');
if (fs.existsSync(packageFile)) {
    const packageContent = JSON.parse(fs.readFileSync(packageFile, 'utf8'));
    const dependencies = packageContent.dependencies || {};
    
    console.log('D√©pendances principales:');
    console.log(`‚úÖ React: ${dependencies.react || 'Non trouv√©'}`);
    console.log(`‚úÖ TypeScript: ${dependencies.typescript || 'Non trouv√©'}`);
    console.log(`‚úÖ Vite: ${dependencies.vite || 'Non trouv√©'}`);
    
    // V√©rifier les d√©pendances de d√©veloppement
    const devDependencies = packageContent.devDependencies || {};
    console.log(`‚úÖ @types/react: ${devDependencies['@types/react'] || 'Non trouv√©'}`);
    console.log(`‚úÖ Tailwind CSS: ${devDependencies.tailwindcss || 'Non trouv√©'}`);
}

// R√©sum√© des tests
console.log('\nüìä R√âSUM√â DES TESTS DE STABILIT√â');
console.log('================================');

const tests = [
    { name: 'Hooks React', passed: fs.existsSync(projectsFile) && fs.readFileSync(projectsFile, 'utf8').includes('useState') },
    { name: 'Gestionnaires d\'√©v√©nements', passed: fs.existsSync(projectsFile) && fs.readFileSync(projectsFile, 'utf8').includes('handleChange') },
    { name: 'Validation des √©tapes', passed: fs.existsSync(projectsFile) && fs.readFileSync(projectsFile, 'utf8').includes('validateStep') },
    { name: 'Gestion d\'erreur', passed: fs.existsSync(projectsFile) && fs.readFileSync(projectsFile, 'utf8').includes('try {') },
    { name: 'Optimisations de performance', passed: fs.existsSync(projectsFile) && fs.readFileSync(projectsFile, 'utf8').includes('useMemo') },
    { name: 'Validation des champs', passed: fs.existsSync(projectsFile) && fs.readFileSync(projectsFile, 'utf8').includes('title.trim()') },
    { name: 'D√©pendances', passed: fs.existsSync(packageFile) },
    { name: 'Fichier de composant', passed: fs.existsSync(projectsFile) }
];

const passedTests = tests.filter(test => test.passed).length;
const totalTests = tests.length;
const stabilityScore = Math.round((passedTests / totalTests) * 100);

tests.forEach(test => {
    console.log(`${test.passed ? '‚úÖ' : '‚ùå'} ${test.name}`);
});

console.log(`\nüéØ Score de stabilit√©: ${passedTests}/${totalTests} (${stabilityScore}%)`);

if (stabilityScore >= 90) {
    console.log('üéâ EXCELLENT! Le formulaire est tr√®s stable!');
} else if (stabilityScore >= 70) {
    console.log('üëç BIEN! Quelques am√©liorations mineures recommand√©es.');
} else {
    console.log('‚ö†Ô∏è ATTENTION! Des corrections importantes sont n√©cessaires.');
}

console.log('\nüîß Recommandations d\'am√©lioration:');
console.log('1. V√©rifier les re-renders avec React DevTools');
console.log('2. Tester la navigation entre les √©tapes');
console.log('3. Valider la gestion d\'erreur en cas de probl√®me r√©seau');
console.log('4. Tester la performance avec de gros volumes de donn√©es');
console.log('5. V√©rifier la responsivit√© sur diff√©rents √©crans');
