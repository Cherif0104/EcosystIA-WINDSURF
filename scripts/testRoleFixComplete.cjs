const fs = require('fs');
const path = require('path');

console.log('üéØ TEST FINAL - CORRECTION DES R√îLES COMPL√àTE');
console.log('=============================================\n');

const componentsPath = path.join(__dirname, '../components');
const constantsPath = path.join(__dirname, '../constants');

console.log('üìä V√âRIFICATION FINALE DES R√îLES');
console.log('================================\n');

// 1. V√©rifier les r√¥les dans data.ts
const dataPath = path.join(constantsPath, 'data.ts');
const dataContent = fs.readFileSync(dataPath, 'utf8');
const dataRoleMatches = dataContent.match(/role:\s*['"`]([^'"`]+)['"`]/g);
const dataRoles = dataRoleMatches ? dataRoleMatches.map(match => {
  const roleMatch = match.match(/role:\s*['"`]([^'"`]+)['"`]/);
  return roleMatch ? roleMatch[1] : null;
}).filter(Boolean) : [];
const uniqueDataRoles = [...new Set(dataRoles)];

console.log(`‚úÖ R√¥les dans data.ts: ${uniqueDataRoles.length}`);
console.log('');

// 2. V√©rifier les r√¥les dans Login.tsx
const loginPath = path.join(componentsPath, 'Login.tsx');
const loginContent = fs.readFileSync(loginPath, 'utf8');
const loginOptionMatches = loginContent.match(/value="([^"]+)"/g);
const loginRoles = loginOptionMatches ? loginOptionMatches.map(match => {
  const valueMatch = match.match(/value="([^"]+)"/);
  return valueMatch ? valueMatch[1] : null;
}).filter(Boolean) : [];

console.log(`‚úÖ R√¥les dans Login.tsx: ${loginRoles.length}`);
console.log('');

// 3. V√©rifier la correspondance
const missingInLogin = uniqueDataRoles.filter(role => !loginRoles.includes(role));
const missingInData = loginRoles.filter(role => !uniqueDataRoles.includes(role));

console.log('üîç V√âRIFICATION DE LA CORRESPONDANCE');
console.log('====================================\n');

if (missingInLogin.length > 0) {
  console.log(`‚ùå R√¥les manquants dans Login.tsx: ${missingInLogin.length}`);
  missingInLogin.forEach(role => console.log(`   ‚Ä¢ '${role}'`));
  console.log('');
} else {
  console.log('‚úÖ Tous les r√¥les de data.ts sont dans Login.tsx');
}

if (missingInData.length > 0) {
  console.log(`‚ùå R√¥les manquants dans data.ts: ${missingInData.length}`);
  missingInData.forEach(role => console.log(`   ‚Ä¢ '${role}'`));
  console.log('');
} else {
  console.log('‚úÖ Tous les r√¥les de Login.tsx sont dans data.ts');
}

// 4. V√©rifier le r√¥le par d√©faut
const defaultRoleMatch = loginContent.match(/useState<Role>\('([^']+)'\)/);
const defaultRole = defaultRoleMatch ? defaultRoleMatch[1] : 'non trouv√©';

console.log(`üéØ R√¥le par d√©faut: '${defaultRole}'`);
if (uniqueDataRoles.includes(defaultRole)) {
  console.log('‚úÖ R√¥le par d√©faut valide');
} else {
  console.log('‚ùå R√¥le par d√©faut invalide');
}
console.log('');

// 5. V√©rifier le Dashboard
const dashboardPath = path.join(componentsPath, 'common', 'SimpleModernDashboard.tsx');
const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');

const hasRoleConfig = dashboardContent.includes('getRoleConfig');
const hasUserRole = dashboardContent.includes('user?.role || \'student\'');
const hasDebugLogs = dashboardContent.includes('console.log(\'üéØ Dashboard - Utilisateur actuel:\'');
const hasUseEffect = dashboardContent.includes('useEffect');

console.log('üîß V√âRIFICATION DU DASHBOARD');
console.log('============================\n');
console.log(`‚úÖ Configuration par r√¥le: ${hasRoleConfig ? 'Oui' : 'Non'}`);
console.log(`‚úÖ Fallback r√¥le: ${hasUserRole ? 'Oui' : 'Non'}`);
console.log(`‚úÖ Logs de debug: ${hasDebugLogs ? 'Oui' : 'Non'}`);
console.log(`‚úÖ useEffect pour mise √† jour: ${hasUseEffect ? 'Oui' : 'Non'}`);
console.log('');

// 6. V√©rifier l'AuthContext
const authContextPath = path.join(componentsPath, '..', 'contexts', 'AuthContext.tsx');
const authContextContent = fs.readFileSync(authContextPath, 'utf8');

const hasLoginFunction = authContextContent.includes('const login = (user: User) => {');
const hasUserState = authContextContent.includes('const [user, setUser] = useState<User | null>(null)');
const hasSessionStorage = authContextContent.includes('sessionStorage.setItem');

console.log('üîß V√âRIFICATION DE L\'AUTHCONTEXT');
console.log('=================================\n');
console.log(`‚úÖ Fonction login: ${hasLoginFunction ? 'Oui' : 'Non'}`);
console.log(`‚úÖ √âtat utilisateur: ${hasUserState ? 'Oui' : 'Non'}`);
console.log(`‚úÖ SessionStorage: ${hasSessionStorage ? 'Oui' : 'Non'}`);
console.log('');

console.log('üìà R√âSUM√â FINAL');
console.log('================\n');

const allRolesMatch = missingInLogin.length === 0 && missingInData.length === 0;
const defaultRoleValid = uniqueDataRoles.includes(defaultRole);
const dashboardOk = hasRoleConfig && hasUserRole && hasDebugLogs && hasUseEffect;
const authOk = hasLoginFunction && hasUserState && hasSessionStorage;

if (allRolesMatch && defaultRoleValid && dashboardOk && authOk) {
  console.log('üéâ EXCELLENT! Correction des r√¥les compl√®te !\n');
  console.log('‚ú® CONFIGURATION PARFAITE:');
  console.log('==========================');
  console.log(`‚Ä¢ ${uniqueDataRoles.length} r√¥les avec utilisateurs`);
  console.log(`‚Ä¢ ${loginRoles.length} r√¥les dans Login.tsx`);
  console.log(`‚Ä¢ Correspondance parfaite entre data.ts et Login.tsx`);
  console.log(`‚Ä¢ R√¥le par d√©faut valide`);
  console.log(`‚Ä¢ Dashboard avec logs de debug`);
  console.log(`‚Ä¢ AuthContext fonctionnel\n`);
  
  console.log('üöÄ PR√äT POUR LES TESTS !');
  console.log('========================');
  console.log('1. Ouvrir http://localhost:5175/');
  console.log('2. S√©lectionner un r√¥le (ex: administrator)');
  console.log('3. Cliquer sur "Se connecter"');
  console.log('4. V√©rifier les logs dans la console');
  console.log('5. V√©rifier que le Dashboard affiche le bon r√¥le\n');
  
  console.log('üéØ R√îLES √Ä TESTER:');
  console.log('==================');
  console.log('‚Ä¢ administrator (Directeur)');
  console.log('‚Ä¢ super_administrator (Super Admin)');
  console.log('‚Ä¢ alumni (Ancien √©l√®ve)');
  console.log('‚Ä¢ coach (Entra√Æneur)');
  console.log('‚Ä¢ teacher (Enseignant)');
  console.log('‚Ä¢ Tous les autres r√¥les\n');
  
  console.log('‚úÖ PROBL√àME R√âSOLU !');
  console.log('====================');
  console.log('Le r√¥le devrait maintenant se mettre √† jour correctement');
  console.log('lors de la connexion avec n\'importe quel r√¥le.\n');
  
} else {
  console.log('‚ùå ATTENTION! Des corrections sont n√©cessaires.\n');
  console.log('üîß ACTIONS REQUISES:');
  console.log('===================');
  if (!allRolesMatch) {
    console.log('1. Corriger les correspondances de r√¥les');
  }
  if (!defaultRoleValid) {
    console.log('2. Corriger le r√¥le par d√©faut');
  }
  if (!dashboardOk) {
    console.log('3. Corriger le Dashboard');
  }
  if (!authOk) {
    console.log('4. Corriger l\'AuthContext');
  }
}

console.log('\nüß™ Test final de correction des r√¥les termin√© !');
