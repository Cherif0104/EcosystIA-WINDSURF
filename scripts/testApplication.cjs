const http = require('http');

console.log('üß™ TEST DE L\'APPLICATION ECOSYSTIA');
console.log('==================================');

// Test de l'application
const testApp = () => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 5173,
      path: '/',
      method: 'GET',
      timeout: 5000
    };

    const req = http.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`‚úÖ Application accessible sur http://localhost:5173/`);
        console.log(`üìä Statut HTTP: ${res.statusCode}`);
        console.log(`üìè Taille de la r√©ponse: ${data.length} caract√®res`);
        
        // V√©rifier le contenu
        if (data.includes('EcosystIA')) {
          console.log('‚úÖ Branding EcosystIA d√©tect√©');
        } else {
          console.log('‚ö†Ô∏è Branding EcosystIA non d√©tect√©');
        }
        
        if (data.includes('SENEGEL')) {
          console.log('‚úÖ R√©f√©rences SENEGEL d√©tect√©es');
        } else {
          console.log('‚ö†Ô∏è R√©f√©rences SENEGEL non d√©tect√©es');
        }
        
        if (data.includes('React')) {
          console.log('‚úÖ Application React d√©tect√©e');
        } else {
          console.log('‚ö†Ô∏è Application React non d√©tect√©e');
        }
        
        resolve({
          status: res.statusCode,
          size: data.length,
          hasEcosystIA: data.includes('EcosystIA'),
          hasSENEGEL: data.includes('SENEGEL'),
          hasReact: data.includes('React')
        });
      });
    });
    
    req.on('error', (error) => {
      console.log(`‚ùå Erreur de connexion: ${error.message}`);
      reject(error);
    });
    
    req.on('timeout', () => {
      console.log('‚ùå Timeout de connexion');
      req.destroy();
      reject(new Error('Timeout'));
    });
    
    req.end();
  });
};

// Test des modules
const testModules = () => {
  console.log('\nüîç V√âRIFICATION DES MODULES');
  console.log('============================');
  
  const fs = require('fs');
  const path = require('path');
  
  const modules = [
    'components/Dashboard.tsx',
    'components/Projects.tsx',
    'components/Goals.tsx',
    'components/CRM.tsx',
    'components/Courses.tsx',
    'components/Jobs.tsx',
    'components/TimeTracking.tsx',
    'components/LeaveManagement.tsx',
    'components/Finance.tsx',
    'components/KnowledgeBase.tsx',
    'components/Development.tsx',
    'components/Tools.tsx',
    'components/AICoach.tsx',
    'components/GenAILab.tsx',
    'components/Analytics.tsx',
    'components/UserManagement.tsx',
    'components/Settings.tsx'
  ];
  
  let modulesFound = 0;
  let modulesWithErrors = 0;
  
  modules.forEach(module => {
    if (fs.existsSync(module)) {
      console.log(`‚úÖ ${module} - Pr√©sent`);
      modulesFound++;
      
      // V√©rifier les imports
      try {
        const content = fs.readFileSync(module, 'utf8');
        if (content.includes('import') && content.includes('from')) {
          console.log(`   üì¶ Imports d√©tect√©s`);
        }
        if (content.includes('export')) {
          console.log(`   üì§ Exports d√©tect√©s`);
        }
        if (content.includes('useState') || content.includes('useEffect')) {
          console.log(`   ‚öõÔ∏è Hooks React d√©tect√©s`);
        }
      } catch (error) {
        console.log(`   ‚ùå Erreur de lecture: ${error.message}`);
        modulesWithErrors++;
      }
    } else {
      console.log(`‚ùå ${module} - Manquant`);
    }
  });
  
  console.log(`\nüìä R√âSULTATS DES MODULES:`);
  console.log(`   ‚úÖ Modules trouv√©s: ${modulesFound}/${modules.length}`);
  console.log(`   ‚ùå Modules avec erreurs: ${modulesWithErrors}`);
  console.log(`   üìà Taux de r√©ussite: ${Math.round((modulesFound / modules.length) * 100)}%`);
  
  return { modulesFound, modulesWithErrors, total: modules.length };
};

// Test des services
const testServices = () => {
  console.log('\nüîß V√âRIFICATION DES SERVICES');
  console.log('=============================');
  
  const fs = require('fs');
  
  const services = [
    'services/geminiService.ts',
    'services/supabaseAuthService.ts',
    'services/userManagementService.ts',
    'services/logService.ts',
    'services/roleManagementService.ts',
    'services/migrationService.ts'
  ];
  
  let servicesFound = 0;
  let servicesWithExports = 0;
  
  services.forEach(service => {
    if (fs.existsSync(service)) {
      console.log(`‚úÖ ${service} - Pr√©sent`);
      servicesFound++;
      
      try {
        const content = fs.readFileSync(service, 'utf8');
        if (content.includes('export')) {
          console.log(`   üì§ Exports d√©tect√©s`);
          servicesWithExports++;
        }
        if (content.includes('async') || content.includes('function')) {
          console.log(`   ‚öôÔ∏è Fonctions d√©tect√©es`);
        }
      } catch (error) {
        console.log(`   ‚ùå Erreur de lecture: ${error.message}`);
      }
    } else {
      console.log(`‚ùå ${service} - Manquant`);
    }
  });
  
  console.log(`\nüìä R√âSULTATS DES SERVICES:`);
  console.log(`   ‚úÖ Services trouv√©s: ${servicesFound}/${services.length}`);
  console.log(`   üì§ Services avec exports: ${servicesWithExports}`);
  console.log(`   üìà Taux de r√©ussite: ${Math.round((servicesFound / services.length) * 100)}%`);
  
  return { servicesFound, servicesWithExports, total: services.length };
};

// Test des contextes
const testContexts = () => {
  console.log('\nüéØ V√âRIFICATION DES CONTEXTES');
  console.log('==============================');
  
  const fs = require('fs');
  
  const contexts = [
    'contexts/AuthContext.tsx',
    'contexts/LocalizationContext.tsx'
  ];
  
  let contextsFound = 0;
  
  contexts.forEach(context => {
    if (fs.existsSync(context)) {
      console.log(`‚úÖ ${context} - Pr√©sent`);
      contextsFound++;
      
      try {
        const content = fs.readFileSync(context, 'utf8');
        if (content.includes('createContext')) {
          console.log(`   üéØ Context React d√©tect√©`);
        }
        if (content.includes('Provider')) {
          console.log(`   üîÑ Provider d√©tect√©`);
        }
      } catch (error) {
        console.log(`   ‚ùå Erreur de lecture: ${error.message}`);
      }
    } else {
      console.log(`‚ùå ${context} - Manquant`);
    }
  });
  
  console.log(`\nüìä R√âSULTATS DES CONTEXTES:`);
  console.log(`   ‚úÖ Contextes trouv√©s: ${contextsFound}/${contexts.length}`);
  console.log(`   üìà Taux de r√©ussite: ${Math.round((contextsFound / contexts.length) * 100)}%`);
  
  return { contextsFound, total: contexts.length };
};

// Ex√©cution des tests
const runTests = async () => {
  try {
    console.log('üöÄ D√©marrage des tests...\n');
    
    // Test de l'application
    const appResult = await testApp();
    
    // Test des modules
    const modulesResult = testModules();
    
    // Test des services
    const servicesResult = testServices();
    
    // Test des contextes
    const contextsResult = testContexts();
    
    // R√©sum√© final
    console.log('\nüéâ R√âSUM√â FINAL');
    console.log('================');
    console.log(`üåê Application: ${appResult.status === 200 ? '‚úÖ Fonctionnelle' : '‚ùå Erreur'}`);
    console.log(`üì± Modules: ${modulesResult.modulesFound}/${modulesResult.total} (${Math.round((modulesResult.modulesFound / modulesResult.total) * 100)}%)`);
    console.log(`üîß Services: ${servicesResult.servicesFound}/${servicesResult.total} (${Math.round((servicesResult.servicesFound / servicesResult.total) * 100)}%)`);
    console.log(`üéØ Contextes: ${contextsResult.contextsFound}/${contextsResult.total} (${Math.round((contextsResult.contextsFound / contextsResult.total) * 100)}%)`);
    
    const overallScore = Math.round((
      (appResult.status === 200 ? 100 : 0) +
      (modulesResult.modulesFound / modulesResult.total) * 100 +
      (servicesResult.servicesFound / servicesResult.total) * 100 +
      (contextsResult.contextsFound / contextsResult.total) * 100
    ) / 4);
    
    console.log(`\nüèÜ SCORE GLOBAL: ${overallScore}%`);
    
    if (overallScore >= 80) {
      console.log('üéâ EXCELLENT ! L\'application EcosystIA est pr√™te !');
    } else if (overallScore >= 60) {
      console.log('üëç BIEN ! Quelques am√©liorations n√©cessaires.');
    } else {
      console.log('‚ö†Ô∏è ATTENTION ! Des corrections importantes sont n√©cessaires.');
    }
    
    console.log('\nüöÄ Prochaines √©tapes:');
    console.log('   1. Tester l\'interface utilisateur');
    console.log('   2. V√©rifier l\'authentification');
    console.log('   3. Tester les modules un par un');
    console.log('   4. Impl√©menter les CRUD manquants');
    
  } catch (error) {
    console.log(`‚ùå Erreur lors des tests: ${error.message}`);
    console.log('\nüîß Actions sugg√©r√©es:');
    console.log('   1. V√©rifier que l\'application est lanc√©e (npm run dev)');
    console.log('   2. V√©rifier le port (5173)');
    console.log('   3. V√©rifier les logs de l\'application');
  }
};

runTests();
