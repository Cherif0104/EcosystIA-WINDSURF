#!/usr/bin/env node

/**
 * Script de test automatis√© pour le formulaire de projets
 * Teste les fonctionnalit√©s principales de l'interface
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ TEST DU FORMULAIRE DE PROJETS');
console.log('================================\n');

// Test 1: V√©rification des fichiers CSS
console.log('üìÅ Test 1: V√©rification des styles CSS...');
const cssFile = path.join(__dirname, '../src/styles/scrollbar.css');
if (fs.existsSync(cssFile)) {
    console.log('‚úÖ Fichier CSS scrollbar.css trouv√©');
    const cssContent = fs.readFileSync(cssFile, 'utf8');
    const hasScrollbarStyles = cssContent.includes('scrollbar-thin');
    const hasGradients = cssContent.includes('linear-gradient');
    const hasAnimations = cssContent.includes('@keyframes');
    
    console.log(`‚úÖ Styles de scrollbar: ${hasScrollbarStyles ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ Gradients CSS: ${hasGradients ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ Animations: ${hasAnimations ? '‚úì' : '‚úó'}`);
} else {
    console.log('‚ùå Fichier CSS scrollbar.css manquant');
}

// Test 2: V√©rification du composant Projects
console.log('\nüìÅ Test 2: V√©rification du composant Projects...');
const projectsFile = path.join(__dirname, '../components/Projects.tsx');
if (fs.existsSync(projectsFile)) {
    console.log('‚úÖ Fichier Projects.tsx trouv√©');
    const projectsContent = fs.readFileSync(projectsFile, 'utf8');
    
    // V√©rifications des fonctionnalit√©s
    const hasStepNavigation = projectsContent.includes('currentStep');
    const hasScrollHandling = projectsContent.includes('handleScroll');
    const hasTeamSelection = projectsContent.includes('toggleTeamMember');
    const hasExportFunction = projectsContent.includes('handleExportProjects');
    const hasValidation = projectsContent.includes('stepValidation');
    const hasScrollbarClasses = projectsContent.includes('scrollbar-thin');
    
    console.log(`‚úÖ Navigation par √©tapes: ${hasStepNavigation ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ Gestion du d√©filement: ${hasScrollHandling ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ S√©lection d'√©quipe: ${hasTeamSelection ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ Fonction d'export: ${hasExportFunction ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ Validation des √©tapes: ${hasValidation ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ Classes de scrollbar: ${hasScrollbarClasses ? '‚úì' : '‚úó'}`);
} else {
    console.log('‚ùå Fichier Projects.tsx manquant');
}

// Test 3: V√©rification du fichier HTML
console.log('\nüìÅ Test 3: V√©rification du fichier HTML...');
const htmlFile = path.join(__dirname, '../index.html');
if (fs.existsSync(htmlFile)) {
    console.log('‚úÖ Fichier index.html trouv√©');
    const htmlContent = fs.readFileSync(htmlFile, 'utf8');
    
    const hasTailwind = htmlContent.includes('tailwindcss.com');
    const hasFontAwesome = htmlContent.includes('font-awesome');
    const hasScrollbarCSS = htmlContent.includes('scrollbar.css');
    
    console.log(`‚úÖ Tailwind CSS: ${hasTailwind ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ Font Awesome: ${hasFontAwesome ? '‚úì' : '‚úó'}`);
    console.log(`‚úÖ Scrollbar CSS: ${hasScrollbarCSS ? '‚úì' : '‚úó'}`);
} else {
    console.log('‚ùå Fichier index.html manquant');
}

// Test 4: V√©rification des fonctionnalit√©s React
console.log('\n‚öõÔ∏è Test 4: V√©rification des hooks React...');
const projectsContent = fs.readFileSync(projectsFile, 'utf8');

const hasUseState = projectsContent.includes('useState');
const hasUseMemo = projectsContent.includes('useMemo');
const hasUseEffect = projectsContent.includes('useEffect');

console.log(`‚úÖ useState hooks: ${hasUseState ? '‚úì' : '‚úó'}`);
console.log(`‚úÖ useMemo hooks: ${hasUseMemo ? '‚úì' : '‚úó'}`);
console.log(`‚úÖ useEffect hooks: ${hasUseEffect ? '‚úì' : '‚úó'}`);

// Test 5: V√©rification des classes CSS personnalis√©es
console.log('\nüé® Test 5: V√©rification des classes CSS...');
const cssClasses = [
    'scrollbar-thin',
    'scrollbar-blue',
    'scrollbar-green',
    'scrollbar-shadow',
    'scroll-container',
    'scroll-indicator'
];

let allClassesFound = true;
cssClasses.forEach(className => {
    const found = projectsContent.includes(className);
    console.log(`‚úÖ Classe ${className}: ${found ? '‚úì' : '‚úó'}`);
    if (!found) allClassesFound = false;
});

// R√©sum√© des tests
console.log('\nüìä R√âSUM√â DES TESTS');
console.log('==================');

const tests = [
    { name: 'Styles CSS', passed: fs.existsSync(cssFile) },
    { name: 'Composant Projects', passed: fs.existsSync(projectsFile) },
    { name: 'Fichier HTML', passed: fs.existsSync(htmlFile) },
    { name: 'Navigation par √©tapes', passed: projectsContent.includes('currentStep') },
    { name: 'Gestion du d√©filement', passed: projectsContent.includes('handleScroll') },
    { name: 'S√©lection d\'√©quipe', passed: projectsContent.includes('toggleTeamMember') },
    { name: 'Fonction d\'export', passed: projectsContent.includes('handleExportProjects') },
    { name: 'Classes CSS personnalis√©es', passed: allClassesFound }
];

const passedTests = tests.filter(test => test.passed).length;
const totalTests = tests.length;
const successRate = Math.round((passedTests / totalTests) * 100);

tests.forEach(test => {
    console.log(`${test.passed ? '‚úÖ' : '‚ùå'} ${test.name}`);
});

console.log(`\nüéØ Score: ${passedTests}/${totalTests} (${successRate}%)`);

if (successRate >= 90) {
    console.log('üéâ EXCELLENT! L\'application est pr√™te pour la production!');
} else if (successRate >= 70) {
    console.log('üëç BIEN! Quelques am√©liorations mineures recommand√©es.');
} else {
    console.log('‚ö†Ô∏è ATTENTION! Des corrections importantes sont n√©cessaires.');
}

console.log('\nüöÄ Instructions de test manuel:');
console.log('1. Ouvrir http://localhost:5175/');
console.log('2. Cliquer sur "Nouveau projet"');
console.log('3. Tester la navigation entre les √©tapes');
console.log('4. V√©rifier les barres de d√©filement');
console.log('5. Tester la s√©lection d\'√©quipe');
console.log('6. Tester l\'export des projets');
console.log('7. V√©rifier le responsive design');
