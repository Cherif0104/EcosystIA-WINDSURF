console.log('ðŸ”§ CORRECTION DES POLITIQUES RLS\n');
console.log('='.repeat(50));

const sqlScript = `-- Script de correction des politiques RLS
-- ProblÃ¨me : rÃ©cursion infinie dÃ©tectÃ©e
-- Solution : simplifier les politiques

-- Supprimer toutes les politiques existantes pour la table users
DROP POLICY IF EXISTS "Users can view own profile" ON public.users;
DROP POLICY IF EXISTS "Users can update own profile" ON public.users;
DROP POLICY IF EXISTS "Super admins can manage all users" ON public.users;
DROP POLICY IF EXISTS "Admins can view all users" ON public.users;

-- DÃ©sactiver temporairement RLS pour corriger
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;

-- RÃ©activer RLS
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- CrÃ©er des politiques simplifiÃ©es sans rÃ©cursion
-- Politique pour permettre Ã  tous les utilisateurs authentifiÃ©s de voir leurs propres donnÃ©es
CREATE POLICY "Users can view own profile" ON public.users
    FOR SELECT USING (auth.uid() = id);

-- Politique pour permettre Ã  tous les utilisateurs authentifiÃ©s de mettre Ã  jour leurs propres donnÃ©es
CREATE POLICY "Users can update own profile" ON public.users
    FOR UPDATE USING (auth.uid() = id);

-- Politique pour permettre l'insertion (nÃ©cessaire pour la crÃ©ation d'utilisateurs)
CREATE POLICY "Users can insert own profile" ON public.users
    FOR INSERT WITH CHECK (auth.uid() = id);

-- Politique pour les super administrateurs (sans rÃ©cursion)
CREATE POLICY "Super admins full access" ON public.users
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND (auth.users.raw_user_meta_data->>'role')::text = 'super_administrator'
        )
    );

-- Politique pour les administrateurs (lecture seule)
CREATE POLICY "Admins read access" ON public.users
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.id = auth.uid() 
            AND (auth.users.raw_user_meta_data->>'role')::text IN ('super_administrator', 'administrator')
        )
    );

-- VÃ©rification finale
SELECT 
    policyname,
    cmd,
    qual
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename = 'users'
ORDER BY policyname;`;

console.log('ðŸ“„ SCRIPT SQL Ã€ EXÃ‰CUTER DANS SUPABASE:');
console.log('='.repeat(60));
console.log(sqlScript);
console.log('='.repeat(60));

console.log('\nðŸŽ¯ INSTRUCTIONS:');
console.log('1. Copiez le script SQL ci-dessus');
console.log('2. Allez dans l\'Ã©diteur SQL de Supabase');
console.log('3. Collez le script et cliquez sur "Run"');
console.log('4. Attendez que le script s\'exÃ©cute');
console.log('5. Revenez ici et exÃ©cutez: node scripts/quickTest.js');

console.log('\nðŸ’¡ Ce script corrige le problÃ¨me de rÃ©cursion infinie dans les politiques RLS');
