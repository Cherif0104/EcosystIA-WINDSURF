#!/bin/bash

# =====================================================
# SCRIPT DE CONFIGURATION SUPABASE - ECOSYSTIA
# =====================================================

echo "üöÄ Configuration de la base de donn√©es Supabase pour EcosystIA"
echo "=============================================================="

# Variables de configuration
SUPABASE_URL="${VITE_SUPABASE_URL:-}"
SUPABASE_ANON_KEY="${VITE_SUPABASE_ANON_KEY:-}"
PROJECT_ID="${SUPABASE_URL#https://}"
PROJECT_ID="${PROJECT_ID%.supabase.co}"

# V√©rification des variables d'environnement
if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_ANON_KEY" ]; then
    echo "‚ùå Erreur: Variables d'environnement Supabase manquantes"
    echo "Veuillez d√©finir VITE_SUPABASE_URL et VITE_SUPABASE_ANON_KEY"
    echo ""
    echo "Exemple:"
    echo "export VITE_SUPABASE_URL='https://your-project.supabase.co'"
    echo "export VITE_SUPABASE_ANON_KEY='your-anon-key'"
    exit 1
fi

echo "‚úÖ Configuration d√©tect√©e:"
echo "   - URL: $SUPABASE_URL"
echo "   - Projet: $PROJECT_ID"
echo ""

# Fonction pour ex√©cuter du SQL via l'API Supabase
execute_sql() {
    local sql_file="$1"
    local description="$2"
    
    echo "üìã $description..."
    
    # Pr√©parer le contenu SQL (√©chapper les caract√®res sp√©ciaux)
    local sql_content=$(cat "$sql_file" | sed 's/"/\\"/g' | tr -d '\n' | sed 's/;/;\n/g')
    
    # Appeler l'API Supabase pour ex√©cuter le SQL
    local response=$(curl -s -X POST \
        "$SUPABASE_URL/rest/v1/rpc/exec_sql" \
        -H "apikey: $SUPABASE_ANON_KEY" \
        -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
        -H "Content-Type: application/json" \
        -d "{\"sql\": \"$sql_content\"}")
    
    if echo "$response" | grep -q "error\|Error\|ERROR"; then
        echo "‚ùå Erreur lors de l'ex√©cution de $sql_file:"
        echo "$response"
        return 1
    else
        echo "‚úÖ $description termin√© avec succ√®s"
        return 0
    fi
}

# Fonction alternative utilisant psql si disponible
execute_sql_psql() {
    local sql_file="$1"
    local description="$2"
    
    echo "üìã $description (via psql)..."
    
    # Extraire l'host, port, dbname, user, password de l'URL
    local db_url="$SUPABASE_URL"
    local host=$(echo "$db_url" | sed 's/.*@\([^:]*\):.*/\1/')
    local port=$(echo "$db_url" | sed 's/.*:\([0-9]*\)\/.*/\1/')
    local dbname=$(echo "$db_url" | sed 's/.*\/\([^?]*\).*/\1/')
    
    # Construire la commande psql
    local psql_cmd="psql -h $host -p $port -d $dbname -f $sql_file"
    
    if command -v psql &> /dev/null; then
        if $psql_cmd; then
            echo "‚úÖ $description termin√© avec succ√®s"
            return 0
        else
            echo "‚ùå Erreur lors de l'ex√©cution de $sql_file"
            return 1
        fi
    else
        echo "‚ö†Ô∏è  psql non disponible, tentative via API..."
        return 1
    fi
}

# V√©rifier si les fichiers SQL existent
if [ ! -f "database/schema.sql" ]; then
    echo "‚ùå Fichier database/schema.sql non trouv√©"
    exit 1
fi

if [ ! -f "database/rls_policies.sql" ]; then
    echo "‚ùå Fichier database/rls_policies.sql non trouv√©"
    exit 1
fi

if [ ! -f "database/seed_data.sql" ]; then
    echo "‚ùå Fichier database/seed_data.sql non trouv√©"
    exit 1
fi

echo "üîç V√©rification de la connexion Supabase..."

# Test de connexion
test_response=$(curl -s -X GET \
    "$SUPABASE_URL/rest/v1/" \
    -H "apikey: $SUPABASE_ANON_KEY" \
    -H "Authorization: Bearer $SUPABASE_ANON_KEY")

if echo "$test_response" | grep -q "error\|Error\|ERROR"; then
    echo "‚ùå Impossible de se connecter √† Supabase"
    echo "V√©rifiez vos variables d'environnement"
    exit 1
else
    echo "‚úÖ Connexion Supabase √©tablie"
fi

echo ""
echo "üìä D√©marrage de la configuration de la base de donn√©es..."
echo ""

# √âtape 1: Cr√©ation du sch√©ma
echo "üèóÔ∏è  √âTAPE 1: Cr√©ation du sch√©ma de base de donn√©es"
if execute_sql_psql "database/schema.sql" "Cr√©ation des tables et structures"; then
    echo "‚úÖ Sch√©ma cr√©√© avec succ√®s"
else
    echo "‚ö†Ô∏è  √âchec via psql, tentative via API..."
    if execute_sql "database/schema.sql" "Cr√©ation des tables et structures"; then
        echo "‚úÖ Sch√©ma cr√©√© avec succ√®s"
    else
        echo "‚ùå Impossible de cr√©er le sch√©ma"
        echo "Veuillez ex√©cuter manuellement le fichier database/schema.sql dans l'√©diteur SQL de Supabase"
        exit 1
    fi
fi

echo ""

# √âtape 2: Configuration des politiques RLS
echo "üîí √âTAPE 2: Configuration des politiques RLS"
if execute_sql_psql "database/rls_policies.sql" "Application des politiques de s√©curit√©"; then
    echo "‚úÖ Politiques RLS configur√©es avec succ√®s"
else
    echo "‚ö†Ô∏è  √âchec via psql, tentative via API..."
    if execute_sql "database/rls_policies.sql" "Application des politiques de s√©curit√©"; then
        echo "‚úÖ Politiques RLS configur√©es avec succ√®s"
    else
        echo "‚ùå Impossible de configurer les politiques RLS"
        echo "Veuillez ex√©cuter manuellement le fichier database/rls_policies.sql dans l'√©diteur SQL de Supabase"
        exit 1
    fi
fi

echo ""

# √âtape 3: Insertion des donn√©es initiales
echo "üå± √âTAPE 3: Insertion des donn√©es initiales"
if execute_sql_psql "database/seed_data.sql" "Insertion des donn√©es de d√©monstration"; then
    echo "‚úÖ Donn√©es initiales ins√©r√©es avec succ√®s"
else
    echo "‚ö†Ô∏è  √âchec via psql, tentative via API..."
    if execute_sql "database/seed_data.sql" "Insertion des donn√©es de d√©monstration"; then
        echo "‚úÖ Donn√©es initiales ins√©r√©es avec succ√®s"
    else
        echo "‚ùå Impossible d'ins√©rer les donn√©es initiales"
        echo "Veuillez ex√©cuter manuellement le fichier database/seed_data.sql dans l'√©diteur SQL de Supabase"
        exit 1
    fi
fi

echo ""

# √âtape 4: V√©rification de la configuration
echo "üîç √âTAPE 4: V√©rification de la configuration"

# V√©rifier que les tables existent
echo "üìã V√©rification des tables cr√©√©es..."
tables_response=$(curl -s -X GET \
    "$SUPABASE_URL/rest/v1/information_schema.tables?select=table_name&table_schema=eq.public" \
    -H "apikey: $SUPABASE_ANON_KEY" \
    -H "Authorization: Bearer $SUPABASE_ANON_KEY")

if echo "$tables_response" | grep -q "users\|projects\|courses\|jobs"; then
    echo "‚úÖ Tables principales cr√©√©es"
else
    echo "‚ö†Ô∏è  Certaines tables peuvent √™tre manquantes"
fi

# V√©rifier que les modules sont configur√©s
echo "üìã V√©rification des modules..."
modules_response=$(curl -s -X GET \
    "$SUPABASE_URL/rest/v1/modules?select=id,name" \
    -H "apikey: $SUPABASE_ANON_KEY" \
    -H "Authorization: Bearer $SUPABASE_ANON_KEY")

if echo "$modules_response" | grep -q "dashboard\|projects\|courses"; then
    echo "‚úÖ Modules configur√©s"
else
    echo "‚ö†Ô∏è  Modules non trouv√©s"
fi

# V√©rifier que les permissions sont configur√©es
echo "üìã V√©rification des permissions..."
permissions_response=$(curl -s -X GET \
    "$SUPABASE_URL/rest/v1/role_permissions?select=role,module_id" \
    -H "apikey: $SUPABASE_ANON_KEY" \
    -H "Authorization: Bearer $SUPABASE_ANON_KEY")

if echo "$permissions_response" | grep -q "super_administrator\|manager\|student"; then
    echo "‚úÖ Permissions configur√©es"
else
    echo "‚ö†Ô∏è  Permissions non trouv√©es"
fi

echo ""
echo "üéâ CONFIGURATION TERMIN√âE !"
echo "=========================="
echo ""
echo "‚úÖ Base de donn√©es EcosystIA configur√©e avec succ√®s"
echo "‚úÖ Sch√©ma cr√©√© avec toutes les tables"
echo "‚úÖ Politiques RLS appliqu√©es"
echo "‚úÖ Donn√©es initiales ins√©r√©es"
echo "‚úÖ 18 modules configur√©s"
echo "‚úÖ 19 r√¥les avec permissions granulaires"
echo "‚úÖ Donn√©es de d√©monstration ajout√©es"
echo ""
echo "üöÄ Votre base de donn√©es est pr√™te pour EcosystIA !"
echo ""
echo "üìã PROCHAINES √âTAPES:"
echo "1. Cr√©er votre premier utilisateur super administrateur"
echo "2. Tester la connexion depuis l'application"
echo "3. Configurer les variables d'environnement"
echo "4. D√©marrer l'application avec: npm run dev"
echo ""
echo "üîó Acc√©dez √† votre dashboard Supabase:"
echo "   https://supabase.com/dashboard/project/$PROJECT_ID"
echo ""
echo "üìñ Documentation:"
echo "   - Sch√©ma: database/schema.sql"
echo "   - Politiques: database/rls_policies.sql"
echo "   - Donn√©es: database/seed_data.sql"
echo ""
echo "‚ú® Bon d√©veloppement avec EcosystIA !"
