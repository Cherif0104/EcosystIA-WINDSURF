import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://wdiqyvwzjiiaktwizxul.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndkaXF5dnd6amlpYWt0d2l6eHVsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2Mjk3NzksImV4cCI6MjA3MzIwNTc3OX0.FWnSb5Ulor7xYylUDJLu02E49FnGHpCog9MxH2uodQE';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testSystemLogs() {
  console.log('üß™ Test du syst√®me de logs...\n');

  try {
    // Test 1: V√©rifier si la table system_logs existe
    console.log('1Ô∏è‚É£ V√©rification de l\'existence de la table system_logs...');
    
    const { data: tableCheck, error: tableError } = await supabase
      .from('system_logs')
      .select('*')
      .limit(1);

    if (tableError) {
      console.log('‚ùå Table system_logs non trouv√©e:', tableError.message);
      console.log('\nüìã INSTRUCTIONS :');
      console.log('1. Allez dans Supabase Dashboard ‚Üí SQL Editor');
      console.log('2. Remplacez votre script par le script SQL corrig√©');
      console.log('3. Cliquez sur "Run"');
      console.log('4. Relancez ce test');
      return;
    }

    console.log('‚úÖ Table system_logs trouv√©e !');

    // Test 2: Se connecter avec un utilisateur admin
    console.log('\n2Ô∏è‚É£ Connexion avec l\'utilisateur admin...');
    
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'admin@senegal.com',
      password: 'Admin123!'
    });

    if (authError) {
      console.log('‚ö†Ô∏è Impossible de se connecter:', authError.message);
      console.log('‚úÖ Table cr√©√©e avec succ√®s, mais test d\'insertion n√©cessite une authentification');
      return;
    }

    console.log('‚úÖ Connexion r√©ussie avec:', authData.user.email);

    // Test 3: Cr√©er un log de test
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'un log de test...');
    
    const testLog = {
      user_id: authData.user.id,
      user_email: authData.user.email,
      user_role: 'super_administrator',
      module: 'test',
      action: 'system_test',
      details: 'Test du syst√®me de logs',
      severity: 'info'
    };

    const { data: insertData, error: insertError } = await supabase
      .from('system_logs')
      .insert([testLog])
      .select();

    if (insertError) {
      console.error('‚ùå Erreur lors de l\'insertion du log:', insertError.message);
      return;
    }

    console.log('‚úÖ Log de test cr√©√©:', insertData[0].id);

    // Test 3: R√©cup√©rer les logs
    console.log('\n3Ô∏è‚É£ R√©cup√©ration des logs...');
    
    const { data: logs, error: fetchError } = await supabase
      .from('system_logs')
      .select('*')
      .order('timestamp', { ascending: false })
      .limit(5);

    if (fetchError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des logs:', fetchError.message);
      return;
    }

    console.log('‚úÖ Logs r√©cup√©r√©s:', logs.length, 'entr√©es');
    
    if (logs.length > 0) {
      console.log('\nüìä Derniers logs :');
      logs.forEach((log, index) => {
        console.log(`${index + 1}. ${log.timestamp} - ${log.user_email} - ${log.module} - ${log.action}`);
      });
    }

    // Test 4: Tester les filtres
    console.log('\n4Ô∏è‚É£ Test des filtres...');
    
    const { data: filteredLogs, error: filterError } = await supabase
      .from('system_logs')
      .select('*')
      .eq('module', 'test')
      .order('timestamp', { ascending: false });

    if (filterError) {
      console.error('‚ùå Erreur lors du filtrage:', filterError.message);
      return;
    }

    console.log('‚úÖ Filtrage par module "test":', filteredLogs.length, 'entr√©es');

    // Test 5: Nettoyer les logs de test
    console.log('\n5Ô∏è‚É£ Nettoyage des logs de test...');
    
    const { error: deleteError } = await supabase
      .from('system_logs')
      .delete()
      .eq('module', 'test');

    if (deleteError) {
      console.error('‚ùå Erreur lors du nettoyage:', deleteError.message);
      return;
    }

    console.log('‚úÖ Logs de test supprim√©s');

    console.log('\nüéâ SYST√àME DE LOGS FONCTIONNEL !');
    console.log('üìä R√©sum√© :');
    console.log('- ‚úÖ Table system_logs cr√©√©e');
    console.log('- ‚úÖ Insertion de logs fonctionnelle');
    console.log('- ‚úÖ R√©cup√©ration de logs fonctionnelle');
    console.log('- ‚úÖ Filtrage des logs fonctionnel');
    console.log('- ‚úÖ Suppression de logs fonctionnelle');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

testSystemLogs();
