/**
 * Script de test pour l'int√©gration Frontend-Backend
 * Teste les endpoints critiques de l'API Django
 */

const API_BASE_URL = 'http://localhost:8000/api/v1';

// Tests basiques de connectivit√©
async function testHealthCheck() {
  console.log('üîç Test de connectivit√© API...');
  
  try {
    const response = await fetch(`${API_BASE_URL.replace('/api/v1', '')}/health/`);
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ API Health Check: OK');
      console.log(`   Status: ${data.status}`);
      console.log(`   Service: ${data.service}`);
      console.log(`   Version: ${data.version}`);
      return true;
    } else {
      console.log('‚ùå API Health Check: FAILED');
      return false;
    }
  } catch (error) {
    console.log('‚ùå API Health Check: CONNECTION ERROR');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

// Test des endpoints d'authentification
async function testAuthEndpoints() {
  console.log('\nüîê Test des endpoints d\'authentification...');
  
  const testCredentials = {
    username: 'testuser',
    email: 'test@ecosystia.com',
    password: 'TestPassword123',
    first_name: 'Test',
    last_name: 'User',
    role: 'student'
  };

  try {
    // Test d'inscription (peut √©chouer si l'utilisateur existe d√©j√†)
    console.log('   üìù Test d\'inscription...');
    const signupResponse = await fetch(`${API_BASE_URL}/auth/signup/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testCredentials),
    });

    if (signupResponse.ok) {
      console.log('   ‚úÖ Inscription: OK');
    } else if (signupResponse.status === 400) {
      console.log('   ‚ö†Ô∏è  Inscription: Utilisateur existe d√©j√† (normal)');
    } else {
      console.log('   ‚ùå Inscription: FAILED');
      const errorData = await signupResponse.json();
      console.log(`   Error: ${JSON.stringify(errorData)}`);
    }

    // Test de connexion
    console.log('   üîë Test de connexion...');
    const loginResponse = await fetch(`${API_BASE_URL}/auth/login/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        username: testCredentials.username,
        password: testCredentials.password,
      }),
    });

    if (loginResponse.ok) {
      const loginData = await loginResponse.json();
      console.log('   ‚úÖ Connexion: OK');
      console.log(`   Token re√ßu: ${loginData.tokens?.access ? 'OUI' : 'NON'}`);
      return loginData.tokens?.access;
    } else {
      console.log('   ‚ùå Connexion: FAILED');
      const errorData = await loginResponse.json();
      console.log(`   Error: ${JSON.stringify(errorData)}`);
      return null;
    }
  } catch (error) {
    console.log('   ‚ùå Test d\'authentification: CONNECTION ERROR');
    console.log(`   Error: ${error.message}`);
    return null;
  }
}

// Test des endpoints prot√©g√©s
async function testProtectedEndpoints(token) {
  console.log('\nüîí Test des endpoints prot√©g√©s...');
  
  if (!token) {
    console.log('   ‚ùå Aucun token disponible, skip des tests prot√©g√©s');
    return;
  }

  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
  };

  const endpoints = [
    { name: 'Profile utilisateur', url: '/auth/me/', method: 'GET' },
    { name: 'Liste des projets', url: '/projects/', method: 'GET' },
    { name: 'Liste des cours', url: '/courses/', method: 'GET' },
    { name: 'Liste des emplois', url: '/jobs/', method: 'GET' },
    { name: 'Notifications', url: '/notifications/', method: 'GET' },
    { name: 'Statistiques analytics', url: '/analytics/dashboard/', method: 'GET' },
  ];

  for (const endpoint of endpoints) {
    try {
      console.log(`   üîç Test: ${endpoint.name}...`);
      
      const response = await fetch(`${API_BASE_URL}${endpoint.url}`, {
        method: endpoint.method,
        headers,
      });

      if (response.ok) {
        console.log(`   ‚úÖ ${endpoint.name}: OK`);
      } else if (response.status === 404) {
        console.log(`   ‚ö†Ô∏è  ${endpoint.name}: Endpoint non trouv√© (normal si app non configur√©e)`);
      } else {
        console.log(`   ‚ùå ${endpoint.name}: FAILED (${response.status})`);
      }
    } catch (error) {
      console.log(`   ‚ùå ${endpoint.name}: CONNECTION ERROR`);
    }
  }
}

// Test de la documentation API
async function testApiDocumentation() {
  console.log('\nüìö Test de la documentation API...');
  
  const docEndpoints = [
    { name: 'Schema OpenAPI', url: '/api/schema/' },
    { name: 'Swagger UI', url: '/api/docs/' },
    { name: 'ReDoc', url: '/api/redoc/' },
  ];

  for (const endpoint of docEndpoints) {
    try {
      const response = await fetch(`${API_BASE_URL.replace('/api/v1', '')}${endpoint.url}`);
      
      if (response.ok) {
        console.log(`   ‚úÖ ${endpoint.name}: Disponible`);
      } else {
        console.log(`   ‚ùå ${endpoint.name}: Non disponible (${response.status})`);
      }
    } catch (error) {
      console.log(`   ‚ùå ${endpoint.name}: CONNECTION ERROR`);
    }
  }
}

// Fonction principale
async function runIntegrationTests() {
  console.log('üöÄ TESTS D\'INT√âGRATION ECOSYSTIA FRONTEND-BACKEND');
  console.log('=' .repeat(60));
  console.log(`API Base URL: ${API_BASE_URL}`);
  console.log('=' .repeat(60));

  // Test de connectivit√©
  const isHealthy = await testHealthCheck();
  
  if (!isHealthy) {
    console.log('\n‚ùå √âCHEC: Impossible de se connecter √† l\'API');
    console.log('\nüí° Solutions possibles:');
    console.log('   1. V√©rifiez que le serveur Django est d√©marr√©');
    console.log('   2. V√©rifiez l\'URL de l\'API dans le fichier config.env');
    console.log('   3. V√©rifiez que CORS est configur√© correctement');
    return;
  }

  // Tests d'authentification
  const token = await testAuthEndpoints();

  // Tests des endpoints prot√©g√©s
  await testProtectedEndpoints(token);

  // Tests de documentation
  await testApiDocumentation();

  // R√©sum√©
  console.log('\n' + '=' .repeat(60));
  console.log('üéØ R√âSUM√â DES TESTS');
  console.log('=' .repeat(60));
  
  if (token) {
    console.log('‚úÖ Authentification JWT: FONCTIONNELLE');
    console.log('‚úÖ Int√©gration Frontend-Backend: PR√äTE');
    console.log('\nüéâ L\'int√©gration API est op√©rationnelle !');
    console.log('\nüìù Prochaines √©tapes:');
    console.log('   1. Configurer les migrations Django');
    console.log('   2. Tester les formulaires React');
    console.log('   3. Impl√©menter les notifications temps r√©el');
  } else {
    console.log('‚ö†Ô∏è  Authentification JWT: PARTIELLEMENT FONCTIONNELLE');
    console.log('‚ö†Ô∏è  Int√©gration Frontend-Backend: N√âCESSITE DES AJUSTEMENTS');
    console.log('\nüîß Actions requises:');
    console.log('   1. V√©rifier la configuration des vues d\'authentification');
    console.log('   2. V√©rifier les migrations de la base de donn√©es');
    console.log('   3. Tester les credentials d\'authentification');
  }
}

// Ex√©cution des tests
if (typeof window === 'undefined') {
  // Environnement Node.js
  runIntegrationTests().catch(console.error);
} else {
  // Environnement navigateur
  window.runIntegrationTests = runIntegrationTests;
  console.log('Tests d\'int√©gration charg√©s. Ex√©cutez: runIntegrationTests()');
}
