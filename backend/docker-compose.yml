version: '3.8'

services:
  # Base de données PostgreSQL
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ecosystia
      POSTGRES_USER: ecosystia_user
      POSTGRES_PASSWORD: ecosystia_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecosystia_user -d ecosystia"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django
  web:
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://ecosystia_user:ecosystia_password_2024@db:5432/ecosystia
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Worker pour les tâches asynchrones
  celery:
    build: .
    command: celery -A ecosystia worker -l info
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://ecosystia_user:ecosystia_password_2024@db:5432/ecosystia
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

  # Celery Beat pour les tâches planifiées
  celery-beat:
    build: .
    command: celery -A ecosystia beat -l info
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://ecosystia_user:ecosystia_password_2024@db:5432/ecosystia
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

  # Nginx pour servir les fichiers statiques en production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - web

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
