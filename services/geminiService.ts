import { GoogleGenerativeAI } from '@google/generative-ai';

const API_KEY = 'AIzaSyACERIXIaYEfghB6mFmQIwyGVlOXHRkOtU';

if (!API_KEY) {
  console.warn('Gemini API key not found. Please set the VITE_GEMINI_API_KEY environment variable.');
}

const genAI = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;

// Contexte EcosystIA pour l'IA
const ECOSYSTIA_CONTEXT = `
ECOSYSTIA est la plateforme de gestion intelligente d√©velopp√©e pour SENEGEL (Senegalese Next Generation of Leaders).

MISSION SENEGEL: SENEGEL recruits, trains, and places youth, women leaders, and SMEs to ignite an ecosystem of transparency, skills, and citizenship.

PROGRAMMES PRINCIPAUX SENEGEL:
- Advisory Council of 400 Impact Experts (Conseil d'experts de la diaspora)
- Training for Professional Integration and Enterprise Creation Facilitators
- COYA Platform (Creating Opportunities for Youth in Africa)
- Cooperative of Habitat (1000 parcelles √† Khinine, Keur Moussa)
- Trade Prospection Missions to USA and Europe
- International Study Field

SERVICES SENEGEL:
- Concierge Services
- Music Production
- Real Estate Projects
- International Education

√âQUIPE SENEGEL: Pape Samb (CEO), Amadou Dia LY (Co-Founder), Mariame D. GUINDO, Adama Mandaw SENE, etc.

CONTACT SENEGEL: Liberte 5, No 5486B, 4eme #10, Dakar, Senegal - +221 77 853 33 99 - contact@senegel.org

ECOSYSTIA: Plateforme de travail intelligente avec IA int√©gr√©e, gestion de projets, suivi des objectifs, CRM, formation, finance, et support multilingue (FR, WO, EN, AR) avec devise FCFA. D√©velopp√©e par IMPULCIA AFRIQUE pour SENEGEL.
`;

// Fonction de fallback intelligente
function generateFallbackResponse(prompt: string, context: string = ''): string {
  const lowerPrompt = prompt.toLowerCase();
  
  // R√©ponses contextuelles pour SENEGEL
  if (lowerPrompt.includes('senegel') || lowerPrompt.includes('s√©n√©gal')) {
    return `SENEGEL (Senegalese Next Generation of Leaders) est une organisation d√©di√©e au d√©veloppement du S√©n√©gal.

**Mission :** SENEGEL recruits, trains, and places youth, women leaders, and SMEs to ignite an ecosystem of transparency, skills, and citizenship.

**Programmes principaux :**
‚Ä¢ Advisory Council of 400 Impact Experts
‚Ä¢ Training for Professional Integration and Enterprise Creation Facilitators
‚Ä¢ COYA Platform (Creating Opportunities for Youth in Africa)
‚Ä¢ Cooperative of Habitat (1000 parcelles √† Khinine, Keur Moussa)
‚Ä¢ Trade Prospection Missions to USA and Europe
‚Ä¢ International Study Field

**Contact :** Liberte 5, No 5486B, 4eme #10, Dakar, Senegal - +221 77 853 33 99 - contact@senegel.org

Comment puis-je vous aider avec SENEGEL aujourd'hui ?`;
  }
  
  // R√©ponses pour EcosystIA
  if (lowerPrompt.includes('ecosystia') || lowerPrompt.includes('fonctionnalit√©s') || lowerPrompt.includes('comment utiliser')) {
    return `EcosystIA est la plateforme intelligente de SENEGEL avec de nombreuses fonctionnalit√©s :

**üìä Dashboard** - Vue d'ensemble de vos activit√©s et m√©triques cl√©s
**üìã Projets** - Gestion et coordination de vos projets SENEGEL
**üéØ Objectifs** - D√©finition et suivi de vos OKRs
**üí∞ Finance** - Gestion financi√®re avec devise FCFA
**üìö Formations** - Gestion des cours et d√©veloppement des comp√©tences
**‚è∞ Suivi du temps** - Tracking des activit√©s et projets
**üèñÔ∏è Cong√©s** - Gestion des demandes de cong√©s
**üìñ Base de connaissances** - Documentation et ressources
**üîß Outils** - Calculatrices, convertisseurs, g√©n√©rateurs
**ü§ñ ARVA** - Assistant IA contextuel (c'est moi !)

Naviguez entre les modules pour d√©couvrir toutes les fonctionnalit√©s. Je peux vous aider avec des questions sp√©cifiques sur chaque module !`;
  }
  
  // R√©ponses pour les projets
  if (lowerPrompt.includes('projet') || lowerPrompt.includes('gestion')) {
    return `Pour la gestion de projets dans EcosystIA :

**Cr√©er un projet :**
1. Allez dans le module "Projets"
2. Cliquez sur "Nouveau Projet"
3. Remplissez les informations (nom, description, √©ch√©ance)
4. Assignez une √©quipe et des t√¢ches

**Suivi des projets :**
‚Ä¢ Dashboard avec progression en temps r√©el
‚Ä¢ Timeline des √©ch√©ances
‚Ä¢ Gestion des risques
‚Ä¢ Rapports de statut automatiques

**Fonctionnalit√©s avanc√©es :**
‚Ä¢ Int√©gration avec le suivi du temps
‚Ä¢ Notifications automatiques
‚Ä¢ Collaboration en √©quipe
‚Ä¢ G√©n√©ration de rapports

Besoin d'aide avec un aspect sp√©cifique de la gestion de projets ?`;
  }
  
  // R√©ponses pour les objectifs
  if (lowerPrompt.includes('objectif') || lowerPrompt.includes('okr') || lowerPrompt.includes('goal')) {
    return `Pour la gestion des objectifs et OKRs :

**Objectifs SMART :**
‚Ä¢ **S**p√©cifique - D√©fini clairement
‚Ä¢ **M**esurable - Avec des m√©triques quantifiables
‚Ä¢ **A**tteignable - R√©aliste et faisable
‚Ä¢ **R**elevant - Align√© avec la strat√©gie
‚Ä¢ **T**emporel - Avec une √©ch√©ance d√©finie

**Structure OKR :**
‚Ä¢ **Objectif** : Ce que vous voulez accomplir
‚Ä¢ **R√©sultats Cl√©s** : Comment mesurer le succ√®s (2-5 KR par objectif)

**Conseils :**
‚Ä¢ D√©finissez des objectifs ambitieux mais r√©alistes
‚Ä¢ Suivez la progression r√©guli√®rement
‚Ä¢ Ajustez si n√©cessaire
‚Ä¢ C√©l√©brez les r√©ussites

Voulez-vous de l'aide pour cr√©er vos premiers OKRs ?`;
  }
  
  // R√©ponses pour la finance
  if (lowerPrompt.includes('finance') || lowerPrompt.includes('facture') || lowerPrompt.includes('budget') || lowerPrompt.includes('fcfa')) {
    return `Pour la gestion financi√®re avec FCFA :

**üí≥ Devise FCFA :**
‚Ä¢ Franc CFA Ouest-Africain (XOF)
‚Ä¢ Utilis√© au S√©n√©gal et dans la r√©gion
‚Ä¢ Formatage automatique dans EcosystIA

**üìã Facturation :**
‚Ä¢ Cr√©ation de factures professionnelles
‚Ä¢ Num√©rotation automatique
‚Ä¢ Gestion des clients
‚Ä¢ Suivi des paiements

**üí∞ Budget :**
‚Ä¢ Planification budg√©taire
‚Ä¢ Suivi des d√©penses
‚Ä¢ Alertes de d√©passement
‚Ä¢ Rapports financiers

**üìä Rapports :**
‚Ä¢ √âtat des comptes
‚Ä¢ Analyse des revenus/d√©penses
‚Ä¢ Projections financi√®res

Besoin d'aide avec un aspect sp√©cifique de la finance ?`;
  }
  
  // R√©ponses par d√©faut
  return `Bonjour ! Je suis ARVA, votre assistant intelligent SENEGEL.

Je peux vous aider avec :
‚Ä¢ **SENEGEL** - Informations sur l'organisation
‚Ä¢ **EcosystIA** - Fonctionnalit√©s de la plateforme
‚Ä¢ **Projets** - Gestion et coordination
‚Ä¢ **Objectifs** - OKRs et suivi
‚Ä¢ **Finance** - Gestion FCFA
‚Ä¢ **Formations** - Cours et comp√©tences
‚Ä¢ **Et bien plus !**

Posez-moi une question sp√©cifique ou utilisez les boutons d'action rapide ci-dessous ! üöÄ`;
}

export const geminiService = {
  async generateResponse(prompt: string, context: string = ''): Promise<string> {
    // Solution de fallback temporaire
    return generateFallbackResponse(prompt, context);
    
    if (!genAI) {
      return generateFallbackResponse(prompt, context);
    }
    
    try {
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      
      const fullPrompt = `
${ECOSYSTIA_CONTEXT}

Contexte utilisateur: ${context}

Question/Requ√™te: ${prompt}

R√©pondez en fran√ßais, de mani√®re professionnelle et utile, en vous basant sur les informations EcosystIA et SENEGEL. 
Si la question concerne des fonctionnalit√©s techniques d'EcosystIA, expliquez clairement.
Si c'est sur SENEGEL, donnez des informations pr√©cises et encouragez l'engagement.
Soyez concis mais informatif.
`;

      const result = await model.generateContent(fullPrompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Erreur Gemini API:', error);
      return generateFallbackResponse(prompt, context);
    }
  },

  async generateContent(type: 'email' | 'report' | 'proposal' | 'training', data: any): Promise<string> {
    if (!genAI) {
      return "Service IA temporairement indisponible.";
    }
    
    try {
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      
      let prompt = '';
      
      switch (type) {
        case 'email':
          prompt = `G√©n√®re un email professionnel en fran√ßais pour SENEGEL:
Destinataire: ${data.recipient}
Sujet: ${data.subject}
Contexte: ${data.context}
Tone: Professionnel et engageant`;
          break;
          
        case 'report':
          prompt = `G√©n√®re un rapport professionnel en fran√ßais pour SENEGEL:
Type: ${data.type}
P√©riode: ${data.period}
Donn√©es: ${JSON.stringify(data.data)}
Format: Rapport structur√© avec sections claires`;
          break;
          
        case 'proposal':
          prompt = `G√©n√®re une proposition commerciale en fran√ßais pour SENEGEL:
Client: ${data.client}
Projet: ${data.project}
Budget estim√©: ${data.budget} FCFA
Dur√©e: ${data.duration}
Format: Proposition professionnelle et convaincante`;
          break;
          
        case 'training':
          prompt = `G√©n√®re un contenu de formation en fran√ßais pour SENEGEL:
Sujet: ${data.subject}
Niveau: ${data.level}
Dur√©e: ${data.duration}
Objectifs: ${data.objectives}
Format: Programme de formation structur√©`;
          break;
      }

      const result = await model.generateContent(prompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Erreur Gemini API:', error);
      return "Erreur lors de la g√©n√©ration du contenu.";
    }
  },

  async analyzeData(data: any[], type: 'performance' | 'trends' | 'insights'): Promise<string> {
    if (!genAI) {
      return "Service d'analyse temporairement indisponible.";
    }

    try {
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      
      const prompt = `
Analyse ces donn√©es pour SENEGEL/EcosystIA:
Type d'analyse: ${type}
Donn√©es: ${JSON.stringify(data)}

Fournis une analyse en fran√ßais avec:
- R√©sum√© ex√©cutif
- Points cl√©s
- Recommandations
- Actions sugg√©r√©es

Contexte SENEGEL: Focus sur le d√©veloppement des jeunes, la formation, et l'impact social.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Erreur Gemini API:', error);
      return "Erreur lors de l'analyse des donn√©es.";
    }
  },

  async translateText(text: string, targetLanguage: 'fr' | 'wo' | 'en' | 'ar'): Promise<string> {
    if (!genAI) {
      return text; // Retourner le texte original si l'IA n'est pas disponible
    }

    try {
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      
      const languageNames = {
        'fr': 'fran√ßais',
        'wo': 'wolof',
        'en': 'anglais',
        'ar': 'arabe'
      };

      const prompt = `
Traduis ce texte en ${languageNames[targetLanguage]}:
Texte: "${text}"

Contexte: Communication professionnelle pour SENEGEL (organisation de d√©veloppement s√©n√©galais).
Si c'est du Wolof, utilise l'√©criture latine standard.
Si c'est de l'arabe, utilise l'√©criture arabe standard.
Garde le ton professionnel et adapte le contexte culturel s√©n√©galais si n√©cessaire.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Erreur Gemini API:', error);
      return text; // Retourner le texte original en cas d'erreur
    }
  },

  async generateInsights(userData: any): Promise<string> {
    if (!genAI) {
      return "Service d'insights temporairement indisponible.";
    }
    
    try {
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      
      const prompt = `
Analyse les donn√©es utilisateur suivantes et g√©n√®re des insights personnalis√©s pour SENEGEL:

Donn√©es utilisateur: ${JSON.stringify(userData)}

G√©n√®re des insights en fran√ßais qui incluent:
- Analyse des performances
- Recommandations d'am√©lioration
- Opportunit√©s d'apprentissage
- Objectifs sugg√©r√©s
- Ressources SENEGEL pertinentes

Contexte: Utilisateur d'EcosystIA travaillant avec ou pour SENEGEL.
Focus sur le d√©veloppement personnel/professionnel et l'impact social.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error('Erreur Gemini API:', error);
      return "Erreur lors de la g√©n√©ration d'insights.";
    }
  }
};

// Fonctions manquantes pour compatibilit√©
export const runAIAgent = async (prompt: string, context: any = {}) => {
  return geminiService.generateResponse(prompt, JSON.stringify(context));
};

export const runAuthAIAssistant = async (prompt: string, userData: any = {}) => {
  return geminiService.generateResponse(prompt, `Utilisateur: ${JSON.stringify(userData)}`);
};

export const draftSalesEmail = async (clientData: any) => {
  return geminiService.generateContent('email', {
    recipient: clientData.name,
    subject: `Proposition commerciale - ${clientData.project}`,
    context: `Client: ${JSON.stringify(clientData)}`
  });
};

export const identifyRisks = async (projectData: any) => {
  return geminiService.analyzeData([projectData], 'insights');
};

export const generateStatusReport = async (projectData: any) => {
  return geminiService.generateContent('report', {
    type: 'Rapport de statut projet',
    period: 'Actuel',
    data: projectData
  });
};

export const enhanceProjectTasks = async (tasks: any[]) => {
  return geminiService.analyzeData(tasks, 'performance');
};

export const summarizeTasks = async (tasks: any[]) => {
  return geminiService.analyzeData(tasks, 'insights');
};

// Fonctions manquantes pour les composants
export const runAICoach = async (prompt: string, context: any = {}) => {
  return geminiService.generateResponse(prompt, `Coaching context: ${JSON.stringify(context)}`);
};

export const generateImage = async (prompt: string) => {
  if (!genAI) {
    return "Service de g√©n√©ration d'images temporairement indisponible.";
    }
    
    try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(`G√©n√®re une description d'image pour: ${prompt}`);
    const response = await result.response;
    return response.text();
    } catch (error) {
    console.error('Erreur g√©n√©ration image:', error);
    return "Erreur lors de la g√©n√©ration d'image.";
  }
};

export const editImage = async (imageData: any, instructions: string) => {
  if (!genAI) {
    return "Service d'√©dition d'images temporairement indisponible.";
    }

    try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(`Instructions d'√©dition: ${instructions}. Image: ${JSON.stringify(imageData)}`);
    const response = await result.response;
    return response.text();
    } catch (error) {
    console.error('Erreur √©dition image:', error);
    return "Erreur lors de l'√©dition d'image.";
  }
};

export const generateOKRs = async (context: any) => {
  return geminiService.generateContent('training', {
    subject: 'G√©n√©ration d\'OKRs',
    level: 'Professionnel',
    duration: '1 heure',
    objectives: `Cr√©er des OKRs pour: ${JSON.stringify(context)}`
  });
};

export const summarizeAndCreateDoc = async (content: string, type: string) => {
  return geminiService.generateContent('report', {
    type: `Document ${type}`,
    period: 'Actuel',
    data: { content, type }
  });
};

export default geminiService;